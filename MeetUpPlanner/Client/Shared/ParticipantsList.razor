@using MeetUpPlanner.Shared
@inject DialogService dialogService
@inject KeywordCheck KeywordCheck
@inject AppState AppStateStore


<h1>Teilnehmer</h1>
<ul>
    @if (KeywordCheck.IsAdmin && !CalendarItem.WithoutHost)
    {
        <li><b>@CalendarItem.HostDisplayName(NameDisplayLength)</b> - @CalendarItem.HostAdressInfo</li>
    }
    @foreach (Participant p in CalendarItem.ParticipantsList)
    {
        @if (!p.IsWaiting)
        {
            <li>
                <button class="btn btn-sm btn-outline-secondary" disabled="@saveDisabled" @onclick="@(() => ConfirmDelete(p))"><span class="oi oi-trash" title="Abmelden"></span></button>
                @if (p.Federation == AppStateStore.Tenant.FederationKey)
                {
                    @p.ParticipantDisplayName(NameDisplayLength)<text> - </text>@p.ParticipantAdressInfo
                }
                else
                {
                    @p.ParticipantDisplayName(NameDisplayLength)<span class="badge badge-success">@p.Federation</span><text> - </text>@p.ParticipantAdressInfo
                }
            </li>
        }
    }
</ul>
@if (CalendarItem.WaitingListCounter > 0)
{
    <h1>Warteliste</h1>
    <ul>
        @foreach (Participant p in CalendarItem.ParticipantsList)
        {
            if (p.IsWaiting)
            {
                <li>
                    <button class="btn btn-sm btn-outline-secondary" disabled="@saveDisabled" @onclick="@(() => ConfirmDelete(p))"><span class="oi oi-trash" title="Abmelden"></span></button>
                    @if (p.Federation == AppStateStore.Tenant.FederationKey)
                    {
                        @p.ParticipantDisplayName(NameDisplayLength)<text> - </text>@p.ParticipantAdressInfo
                    }
                    else
                    {
                        @p.ParticipantDisplayName(NameDisplayLength)<span class="badge badge-success">@p.Federation</span><text> - </text>@p.ParticipantAdressInfo
                    }
                </li>
            }
        }
    </ul>
}



@code {
    [Parameter]
    public ExtendedCalendarItem CalendarItem { get; set; }
    [Parameter]
    public EventCallback<Participant> OnRemoveParticipant { get; set; }
    [Parameter]
    public int NameDisplayLength { get; set; } = 1;
    private Boolean saveDisabled = false;
    Participant participantToBeDeleted;

    protected void ConfirmDelete(Participant p)
    {
        participantToBeDeleted = p;
        dialogService.OnClose += DeleteConfirmed;
        dialogService.Confirm("Teilnehmer wirklich abmelden?", "Teilnehmer", new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nein" });
    }

    protected async void DeleteConfirmed(dynamic result)
    {
        dialogService.OnClose -= DeleteConfirmed;
        bool? removeIt = result;
        if (null != removeIt && null != participantToBeDeleted)
        {
            if ((bool)removeIt)
            {
                saveDisabled = true;
                StateHasChanged();
                await OnRemoveParticipant.InvokeAsync(participantToBeDeleted);
            }
        }
        participantToBeDeleted = null;
        saveDisabled = false;
        StateHasChanged();
    }

}
