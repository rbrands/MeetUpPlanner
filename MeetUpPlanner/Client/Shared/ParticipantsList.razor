@using MeetUpPlanner.Shared
@inject DialogService dialogService

<h1>Teilnehmer</h1>
<ul>
    @foreach (Participant p in Participants)
    {
        <li>
            <button class="btn btn-sm btn-outline-secondary" disabled="@saveDisabled" @onclick="@(() => ConfirmDelete(p))"><span class="oi oi-trash" title="Abmelden"></span></button>
            @p.ParticipantDisplayName(NameDisplayLength) - @p.ParticipantAdressInfo
        </li>
    }
</ul>


@code {
    [Parameter]
    public IEnumerable<Participant> Participants { get; set; }
    [Parameter]
    public EventCallback<Participant> OnRemoveParticipant { get; set; }
    [Parameter]
    public int NameDisplayLength { get; set; } = 1;
    private Boolean saveDisabled = false;
    Participant participantToBeDeleted;

    protected void ConfirmDelete(Participant p)
    {
        participantToBeDeleted = p;
        dialogService.OnClose += DeleteConfirmed;
        dialogService.Confirm("Teilnehmer wirklich abmelden?", "Teilnehmer", new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nein" });
    }

    protected async void DeleteConfirmed(dynamic result)
    {
        dialogService.OnClose -= DeleteConfirmed;
        bool? removeIt = result;
        if (null != removeIt && null != participantToBeDeleted)
        {
            if ((bool)removeIt)
            {
                saveDisabled = true;
                StateHasChanged();
                await OnRemoveParticipant.InvokeAsync(participantToBeDeleted);
            }
        }
        participantToBeDeleted = null;
        saveDisabled = false;
        StateHasChanged();
    }

}
