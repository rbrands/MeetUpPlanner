@using MeetUpPlanner.Shared
@inject DialogService dialogService

@foreach (CalendarComment c in Comments)
{
    <blockquote>
        <p class="mb-0">
            @c.Comment
            @if (!String.IsNullOrEmpty(c.Link))
            {
                <text>&nbsp;</text><a href="@c.Link" target="_blank" title="@c.DisplayLinkTitle">@c.DisplayLinkTitle</a>
            }
        </p>
        <footer class="blockquote-footer">
            <cite title="Autor">@c.AuthorDisplayName(NameDisplayLength)</cite> @c.DisplayDate
            <button class="btn btn-sm btn-outline-secondary" disabled="@saveDisabled" @onclick="@(() => ConfirmDelete(c))"><span class="oi oi-trash" title="Kommentar löschen"></span></button>
        </footer>
    </blockquote>
}

@code {
    [Parameter]
    public IEnumerable<CalendarComment> Comments { get; set; }
    [Parameter]
    public EventCallback<CalendarComment> OnRemoveComment { get; set; }
    [Parameter]
    public int NameDisplayLength { get; set; } = 1;
    private Boolean saveDisabled = false;
    CalendarComment commentToBeDeleted;

    protected void ConfirmDelete(CalendarComment c)
    {
        commentToBeDeleted = c;
        dialogService.OnClose += DeleteConfirmed;
        dialogService.Confirm("Kommentar wirklich löschen?", "Kommentar", new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nein" });
    }

    protected async void DeleteConfirmed(dynamic result)
    {
        dialogService.OnClose -= DeleteConfirmed;
        bool? removeIt = result;
        if (null != removeIt && null != commentToBeDeleted)
        {
            if ((bool)removeIt)
            {
                saveDisabled = true;
                StateHasChanged();
                await OnRemoveComment.InvokeAsync(commentToBeDeleted);
            }
        }
        commentToBeDeleted = null;
        saveDisabled = false;
        StateHasChanged();
    }



}
