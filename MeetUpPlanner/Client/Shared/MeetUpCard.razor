@using MeetUpPlanner.Shared
@inject DialogService dialogService
@inject HttpClient Http
@inject AppState AppStateStore
@inject NavigationManager NavigationManager
@inject DialogService dialogService


<div class="card">
    <div class="card-header">
        <em>
            @CalendarItem.GetStartDateAsString() - @CalendarItem.Place
            @if (!String.IsNullOrEmpty(CalendarItem.DirectionsLink))
            {
                <a href="@CalendarItem.DirectionsLink" class="btn btn-outline-success btn-sm" role="button" target="_blank" tite="Startort"><span class="oi oi-map-marker"></span></a>
            }
        </em>
        @if (CalendarItem.IsInternal && !IsGuest)
        {
            <span class="badge badge-danger"><span class="oi oi-key" title="Vereinsintern"></span></span>
        }
        @if (!String.IsNullOrEmpty(CalendarItem.PrivateKeyword) && !IsGuest)
        {
            <span class="badge badge-danger"><span class="oi oi-key" title="Private Ausfahrt"></span> @CalendarItem.PrivateKeyword</span>
        }
        <span class="badge badge-warning" hidden="@(!CalendarItem.IsCross)">Cross</span>
        @{
            string badge = GetCalendarBadge(CalendarItem);
            if (!String.IsNullOrEmpty(badge))
            {
                <span class="badge badge-info">@badge</span>
            }
        }
    </div>
    @if (!String.IsNullOrEmpty(CalendarItem.LinkImage))
    {
        <a href="@CalendarItem.Link" target="_blank">
            <img class="card-img-top" src="@CalendarItem.LinkImage" alt="@CalendarItem.LinkTitle">
        </a>
    }
    <div class="card-body">
        <h6 class="text-muted card-subtitle mb-2">
            @CalendarItem.LevelDescription - @CalendarItem.Tempo
        </h6>
        <h5 class="card-title">
            @CalendarItem.Title
            @if (CalendarItem.IsCanceled)
            {
                <span class="badge badge-danger" title="Abgesagt">Abgesagt!</span>
            }
        </h5>
        <p class="card-text">
            <div class="overflow-auto" style="max-height: 500px">
                @((MarkupString)CalendarItem.Summary)
            </div>
            @if (IsAdmin && CalendarItem.PublishDate.ToLocalTime().CompareTo(DateTime.Now) > 0)
            {
                <small><em>Veröffentlichung @CalendarItem.GetPublishDateAsString()</em></small>
            }
            @if ((!IsGuest || AppStateStore.ClientSettings.PublicMeetUpJoiningEnabled) && !String.IsNullOrEmpty(CalendarItem.GuestScope))
            {
                <div>
                    <small><em>Link <a href="/@CalendarItem.GuestScope" target="_blank">/@CalendarItem.GuestScope</a></em></small>
                </div>
            }
            @if (!String.IsNullOrEmpty(CalendarItem.RouteLink))
            {
                <div>
                    <small><em>Route <a href="@CalendarItem.RouteLink" target="_blank">@CalendarItem.RouteLink</a></em></small>
                </div>
            }
            <hr />
            @if (!IsGuest || AppStateStore.ClientSettings.PublicMeetUpJoiningEnabled)
            {
                <small>Dabei (@CalendarItem.ParticipantCounter von @CalendarItem.MaxRegistrationsCount)</small>
                @if (CalendarItem.ParticipantCounter < CalendarItem.MinRegistrationsCount)
                {
                    <span class="badge badge-danger" title="Mindestteilnehmerzahl">Min @CalendarItem.MinRegistrationsCount</span>
                }
                <small>: <b>@CalendarItem.HostDisplayName(AppStateStore.ClientSettings.NameDisplayLength)</b>@CalendarItem.ParticipantsDisplay(AppStateStore.ClientSettings.NameDisplayLength)</small>
                @if (0 < CalendarItem.WaitingListCounter)
                {
                    <hr />
                    <small>Warteliste (@CalendarItem.WaitingListCounter von @CalendarItem.MaxWaitingList): @CalendarItem.WaitingListDisplay(AppStateStore.ClientSettings.NameDisplayLength)</small>
                }
            }
            else
            {
                <small>@(CalendarItem.MaxRegistrationsCount - CalendarItem.ParticipantCounter) von @CalendarItem.MaxRegistrationsCount Plätzen noch frei.</small>
                @if (CalendarItem.ParticipantCounter < CalendarItem.MinRegistrationsCount)
                {
                    <span class="badge badge-danger" title="Mindestteilnehmerzahl">Min @CalendarItem.MinRegistrationsCount</span>
                }
            }
            <hr />
            @if (CalendarItem.CommentsList.Count() > 0)
            {
                <ul class="list-unstyled">
                    @foreach (CalendarComment c in CalendarItem.GetMostRecentComments(commentsToDisplay))
                    {
                        <li>
                            <small>
                                <em>@c.AuthorDisplayName(AppStateStore.ClientSettings.NameDisplayLength) (@c.DisplayDate): </em>@c.Comment
                                @if (!String.IsNullOrEmpty(c.Link))
                                {
                                    <text>&nbsp;</text><a title="@c.DisplayLinkTitle" target="_blank" href="@c.Link">@c.DisplayLinkTitle</a>
                                }
                            </small>
                        </li>
                    }
                    @if (!CalendarItem.HideOlderCommments)
                    {
                        @foreach (CalendarComment c in CalendarItem.GetOlderComments(commentsToDisplay))
                        {
                            <li>
                                <small>
                                    <em>@c.AuthorDisplayName(AppStateStore.ClientSettings.NameDisplayLength) (@c.DisplayDate): </em>@c.Comment
                                    @if (!String.IsNullOrEmpty(c.Link))
                                    {
                                        <text>&nbsp;</text><a title="@c.DisplayLinkTitle" target="_blank" href="@c.Link">@c.DisplayLinkTitle</a>
                                    }
                                </small>
                            </li>
                        }
                    }
                    else if (CalendarItem.CommentsCounter > commentsToDisplay)
                    {
                        <li>
                            <button class="btn btn-link text-left" type="button" @onclick="e => CalendarItem.HideOlderCommments = false"><small><em>mehr ...</em></small></button>
                        </li>

                    }
                </ul>
                <hr />
            }
            @if (!String.IsNullOrEmpty(CalendarItem.Link))
            {
                <a href="@CalendarItem.Link" target="_blank" class="card-link">@CalendarItem.DisplayLinkTitle</a>
            }
        </p>
    </div>
    <div class="card-footer">
        <div class="btn-toolbar" role="toolbar" aria-label="Aktionen zur Ausfahrt">
            <div class="btn-group mr-2" role="group" aria-label="Ändern">
                @if (CheckIfUserIsHost(CalendarItem) || IsAdmin)
                {
                    <button class="btn btn-sm btn-outline-secondary" title="Ändern" @onclick="@(() => EditCalendarItem(CalendarItem.Id))"><span class="oi oi-pencil"></span></button>
                    <button class="btn btn-sm btn-outline-secondary" title="Kopieren" @onclick="@(() => ConfirmClone(CalendarItem))"><span class="oi oi-fork"></span></button>
                    <button class="btn btn-sm btn-outline-secondary" title="Löschen" @onclick="@(() => DeleteCalendarItem(CalendarItem))"><span class="oi oi-trash"></span></button>
                    <button class="btn btn-sm btn-outline-secondary" title="Absagen" @onclick="OnCancelCallback"><span class="oi oi-x"></span></button>
                    @if (CalendarItem.ParticipantCounter > 1)
                    {
                        <button class="btn btn-sm btn-outline-secondary" title="Neuer Guide" @onclick="@(() => AssignNewHost(CalendarItem))"><span class="oi oi-share-boxed"></span></button>
                    }
                }
            </div>
            <div class="btn-group mr-2" role="group" aria-label="Teilnehmen">
                @if ((!IsGuest || AppStateStore.ClientSettings.PublicMeetUpJoiningEnabled))
                {
                    <button class="btn btn-sm btn-outline-secondary" title="Kommentieren" @onclick="@(() => ShowComment(CalendarItem))"><span class="oi oi-comment-square"></span></button>
                }
                @if (AppStateStore.ClientSettings.GuestsEnabled && !ShowHistory && !IsGuest)
                {
                    <button class="btn btn-sm btn-outline-secondary" title="Gast einladen" @onclick="@(() => Invite(CalendarItem))"><span class="oi oi-external-link"></span></button>
                }
                @if (CheckIfUserIsHost(CalendarItem) || IsAdmin)
                {
                    <button class="btn btn-sm btn-outline-secondary" title="Andere an/abmelden" @onclick="@(() => RegisterOthers(CalendarItem))"><span class="oi oi-transfer"></span></button>
                }
                @if (!CheckIfUserIsHost(CalendarItem) && !ShowHistory)
                {
                    <button class="btn btn-sm btn-outline-secondary" title="@GetCheckInLabel(CalendarItem)" hidden="@(CheckIfUserIsAlreadyRegistered(CalendarItem) || CalendarItem.IsCanceled)" @onclick="OnCheckinCallback">@GetCheckInLabel(CalendarItem)</button>
                    <button class="btn btn-sm btn-outline-secondary" title="Abmelden" hidden="@(!CheckIfUserIsAlreadyRegistered(CalendarItem))" @onclick="OnCheckoutCallback">Abmelden</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public String FirstName { get; set; }
    [Parameter]
    public String LastName { get; set; }
    [Parameter]
    public ExtendedCalendarItem CalendarItem { get; set; } = new ExtendedCalendarItem();
    [Parameter]
    public Boolean IsAdmin { get; set; } = false;
    [Parameter]
    public Boolean IsGuest { get; set; } = false;
    [Parameter]
    public Boolean ShowHistory { get; set; } = false;
    [Parameter]
    public Boolean EnableCheckInCheckOut { get; set; } = false;
    [Parameter]
    public EventCallback OnChangeCallback { get; set; }
    [Parameter]
    public EventCallback OnCancelCallback { get; set; }
    [Parameter]
    public EventCallback OnCloneCallback { get; set; }
    [Parameter]
    public EventCallback OnCheckinCallback { get; set; }
    [Parameter]
    public EventCallback OnCheckoutCallback { get; set; }
    [Parameter]
    public EventCallback OnCommentCallback { get; set; }
    const int commentsToDisplay = 5;

    private ExtendedCalendarItem calendarItemToBeCloned = null;

    protected bool CheckIfUserIsAlreadyRegistered(ExtendedCalendarItem calendarItem)
    {
        bool alreadyRegistered = calendarItem.FindParticipant(FirstName, LastName) != null;
        return alreadyRegistered;
    }
    protected bool CheckIfUserIsHost(ExtendedCalendarItem calendarItem)
    {
        bool isHost = !calendarItem.WithoutHost && (calendarItem.HostFirstName.Equals(FirstName) && calendarItem.HostLastName.Equals(LastName));
        return isHost;
    }

    protected void EditCalendarItem(string itemId)
    {
        NavigationManager.NavigateTo($"/NewMeetUp/{itemId}");
    }

    protected void ConfirmClone(ExtendedCalendarItem c)
    {
        calendarItemToBeCloned = c;
        dialogService.Confirm("Termin für nächste Woche kopieren?", "Termin kopieren", new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nein" });
    }

    protected async void CloneConfirmed(dynamic result)
    {
        bool? removeIt = result;
        if (null != removeIt && null != calendarItemToBeCloned)
        {
            if ((bool)removeIt)
            {
                await CloneCalendarItem(calendarItemToBeCloned);
            }
        }
        calendarItemToBeCloned = null;
    }


    protected async Task CloneCalendarItem(ExtendedCalendarItem calendarItem)
    {
        await OnCloneCallback.InvokeAsync(null);
    }

    protected async Task ShowComment(ExtendedCalendarItem calendarItem)
    {
        await OnCommentCallback.InvokeAsync(null);
    }
    protected void Invite(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/Invite/{calendarItem.Id}");
    }
    protected void RegisterOthers(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/RegisterOthers/{calendarItem.Id}");
    }
    protected void DeleteCalendarItem(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/ConfirmDelete/{calendarItem.Id}");
    }
    protected void AssignNewHost(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/AssignNewHost/{calendarItem.Id}");
    }


    private string GetCalendarBadge(ExtendedCalendarItem calendarItem)
    {
        string badge = null;
        DayOfWeek weekday = calendarItem.StartDate.DayOfWeek;
        switch (weekday)
        {
            case DayOfWeek.Monday:
                badge = AppStateStore.ClientSettings.MondayBadge;
                break;
            case DayOfWeek.Tuesday:
                badge = AppStateStore.ClientSettings.TuesdayBadge;
                break;
            case DayOfWeek.Wednesday:
                badge = AppStateStore.ClientSettings.WednesdayBadge;
                break;
            case DayOfWeek.Thursday:
                badge = AppStateStore.ClientSettings.ThursdayBadge;
                break;
            case DayOfWeek.Friday:
                badge = AppStateStore.ClientSettings.FridayBadge;
                break;
            case DayOfWeek.Saturday:
                badge = AppStateStore.ClientSettings.SaturdayBadge;
                break;
            case DayOfWeek.Sunday:
                badge = AppStateStore.ClientSettings.SundayBadge;
                break;
        }


        return badge;
    }
    private string GetCheckInLabel(ExtendedCalendarItem calendarItem)
    {
        string checkInLabel = "Anmelden";
        if (calendarItem.ParticipantCounter >= calendarItem.MaxRegistrationsCount && calendarItem.MaxWaitingList > 0)
        {
            checkInLabel = "Auf Warteliste";

        }
        return checkInLabel;
    }

}
