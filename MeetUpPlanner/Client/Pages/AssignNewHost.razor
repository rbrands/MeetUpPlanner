@page "/assignnewhost/{ItemId}"
@inject HttpClient Http
@inject AppState AppStateStore
@inject NavigationManager NavigationManager
@inject NotificationService notificationService
@using MeetUpPlanner.Shared
@using Newtonsoft.Json
@using Microsoft.AspNetCore.SignalR.Client


<MeetUp CalendarItem="@meetup" />
<div>
    <div class="form-group">
        <label for="newhost">Neuer Guide</label>
        <RadzenDropDown id="newhost" aria-describedby="newhostHelp" AllowClear="false" class="form-control" TValue="KeyValuePair<string, Participant>" Placeholder="Neuen Guide auswählen ..." @bind-Value="selectedParticipant" Data="@namesList" TextProperty="Key" />
        <small id="newhostHelp" class="form-text text-muted">
            Wenn du als Organisator der Ausfahrt "abspringst", musst du einen neuen Organisator bestimmen. Oder die ganze Ausfahrt löschen.
        </small>
    </div>
    <div class="form-group">
        <button type="submit" id="BtnSave" class="btn btn-primary" @onclick="@(() => OnReassign())">Ausfahrt übertragen</button>
        <button type="reset" id="BtnCancel" class="btn btn-secondary" @onclick="@(() => OnCancel())">Zurück ...</button>
    </div>
</div>


@code {
    [Parameter]
    public string ItemId { get; set; }
    ExtendedCalendarItem meetup = new ExtendedCalendarItem();
    KeyValuePair<string, Participant> selectedParticipant;
    private HubConnection hubConnection;
    List<KeyValuePair<string, Participant>> namesList = new List<KeyValuePair<string, Participant>>();


    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(AppStateStore?.KeyWord))
        {
            hubConnection = new HubConnectionBuilder()
                 .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
                 .WithAutomaticReconnect()
                 .Build();
            await hubConnection.StartAsync();
            await ReadData();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }
    private async Task ReadData()
    {
        PrepareHttpClient();
        // Get referenced calendar item
        meetup = await Http.GetFromJsonAsync<ExtendedCalendarItem>($"Calendar/extendedcalendaritem?itemId={ItemId}");
        namesList.Clear();
        foreach (Participant p in meetup.ParticipantsList)
        {
            namesList.Add(new KeyValuePair<string, Participant>(p.ParticipantDisplayName(AppStateStore.ClientSettings.NameDisplayLength), p));
        }
    }
    protected void OnCancel()
    {
        NavigationManager.NavigateTo("/calendar");
    }
    protected async Task OnReassign()
    {
        if (null == selectedParticipant.Value )
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Neuer Guide", Detail = "Bitte einen neuen Organisator auswählen.", Duration = 4000 });
            return;
        }
        PrepareHttpClient();
        HttpResponseMessage response = await Http.PostAsJsonAsync<Participant>($"Calendar/assignnewhost", selectedParticipant.Value);
        string responseBody = await response.Content.ReadAsStringAsync();

        BackendResult result = JsonConvert.DeserializeObject<BackendResult>(responseBody);
        if (result.Success)
        {
            if (IsConnected) await SendMessage();
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Info, Summary = "Neuer Guide", Detail = selectedParticipant.Value.ParticipantDisplayName(AppStateStore.ClientSettings.NameDisplayLength), Duration = 4000 });
            NavigationManager.NavigateTo("/calendar");
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Fehler", Detail = result.Message, Duration = 4000 });
        }
    }


    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
    private void PrepareHttpClient()
    {
        if (null != AppStateStore.Tenant?.TenantKey)
        {
            if (!Http.DefaultRequestHeaders.Contains("x-meetup-tenant"))
            {
                Http.DefaultRequestHeaders.Add("x-meetup-tenant", AppStateStore.Tenant.TenantKey);
            }
        }
        if (!Http.DefaultRequestHeaders.Contains("x-meetup-keyword"))
        {
            Http.DefaultRequestHeaders.Add("x-meetup-keyword", AppStateStore.KeyWord);
        }

    }

}
