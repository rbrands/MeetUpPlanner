@page "/"
@inject HttpClient Http
@inject AppState AppStateStore
@inject KeywordCheck KeywordCheck
@using MeetUpPlanner.Shared
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject NotificationService notificationService

<MessageBoard Message="@AppStateStore.ClientSettings?.WelcomeMessage" ShowLogo="true" />
<div class="alert alert-warning" role="alert" hidden="@_hideAlert">
    @((MarkupString)_alertMessage)
</div>
<h2>Zugangsdaten</h2>

<EditForm OnValidSubmit="CheckKeyword" Model="@AppStateStore">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="keyword">Schlüsselwort für die öffentlichen Ausfahrten</label>
        <InputText id="keyword" aria-describedby="keywordHelp" class="form-control" @bind-Value="AppStateStore.KeyWord" autocomplete="on" placeholder="Schlüsselwort für den Zugriff" title="Schlüsselwort zum allgemeinen Zugriff auf die Ausfahrten." />
        <small id="keywordHelp" class="form-text text-muted">
            Für den Zugriff auf die Termine ist ein "Schlüsselwort" notwendig, das separat kommuniziert wurde.
        </small>
    </div>
    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="optkeyword1">Optionale Schlüsselwörter für private Ausfahrten</label>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <InputText id="optkeyword1" aria-describedby="optkeywordHelp" class="form-control form-control-sm" @bind-Value="AppStateStore.PrivateKeyWord1" title="Optionales Schlüsselwort 1" />
            <small id="optkeywordHelp" class="form-text text-muted">
                Ausfahrten können über separate Schlüsselwörter quasi "privatisiert" werden. Hier kannst du die zusätzlichen Schlüsselwörter eintragen.
            </small>
        </div>
        <div class="form-group col-md-4">
            <InputText class="form-control form-control-sm" @bind-Value="AppStateStore.PrivateKeyWord2" title="Optionales Schlüsselwort 2" />
        </div>
        <div class="form-group col-md-4">
            <InputText class="form-control form-control-sm" @bind-Value="AppStateStore.PrivateKeyWord3" title="Optionales Schlüsselwort 3" />
        </div>
    </div>
    <h2>Kontaktdaten</h2>
    <div class="form-row">
        <div class="form-group col-md-12">
            <small id="nameHelp" class="form-text text-muted">
                Zur eindeutigen Nachverfolgbarkeit bitte Vor- und Nachname eingeben. In der Teilnehmerliste der Ausfahrten werden nur die Vornamen angezeigt.
            </small>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <InputText id="firstname" aria-describedby="nameHelp" class="form-control" @bind-Value="AppStateStore.FirstName" autocomplete="on" placeholder="Vorname" title="Vorname" />
        </div>
        <div class="form-group col-md-4">
            <InputText id="lastName" area-describedby="nameHelp" class="form-control" @bind-Value="AppStateStore.LastName" autocomplete="on" placeholder="Nachname" title="Nachname" />
        </div>
    </div>
    <div class="form-group" hidden="@(!AppStateStore.Tenant.ClubMemberShipAllowed)">
        <div class="form-check">
            <InputCheckbox id="addressNotNeeded" @oninput="@(e => { AppStateStore.PhoneMail = ((bool)e.Value ? "Vereinsmitglied" : String.Empty); })" aria-describedby="addressNotNeededHelp" class="form-check-input" @bind-Value="AppStateStore.NoAddressNeeded"></InputCheckbox>
            <label for="addressNotNeeded" class="form-check-label">Vereinsmitglied?</label>
        </div>
        <small id="addressNotNeededHelp">Als Vereinsmitglied werden keine weiteren Adressinfos benötgt, Vor- und Nachname reichen dann.</small>
    </div>
    <div class="form-group" hidden="@AppStateStore.NoAddressNeeded">
        <label for="Phone">Telefon/Mail</label>
        <InputText id="Phone" aria-describedby="phoneHelp" class="form-control" @bind-Value="AppStateStore.PhoneMail" autocomplete="on" placeholder="Telefon-Nr. oder Mail-Adresse" title="Bitte Telefonnummer oder Mailadresse angeben." />
        <small id="phoneHelp" class="form-text text-muted">
            Für die Nachverfolgbarkeit hier bitte deine Mail-Adresse oder Telefonnummer eingeben. Diese Info wird nicht in der allgemeinen Teilnehmerliste zu Ausfahrten angezeigt.
        </small>
    </div>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="SaveSettings" aria-describedby="saveSettingsHelp" class="form-check-input" @bind-Value="AppStateStore.SaveSettings"></InputCheckbox>
            <label for="SaveSettings" class="form-check-label">Einstellungen im Browser merken?</label>
        </div>
        <small id="saveSettingsHelp">Damit beim nächsten Mal der Name usw. nicht neu eingegeben werden muss, können diese Eingaben im Browser gespeichert werden.</small>
    </div>
    <button type="submit" id="BtnSaveKeyword" class="btn btn-primary" disabled="@(!UsageRightsAccepted || _disableStartButton)">Los geht's ...</button>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="accept" class="form-check-input" @bind-Value="@UsageRightsAccepted" />
            <label for="accept" class="form-checklabel">
                @((MarkupString)AppStateStore.ClientSettings.Disclaimer)
            </label>
        </div>
    </div>
</EditForm>



@code {
    Boolean _usageRightsAccepted = false;
    Boolean _hideAlert = true;
    string _alertMessage = String.Empty;
    Boolean _disableStartButton = false;
    Boolean UsageRightsAccepted
    {
        get
        {
            return _usageRightsAccepted;
        }
        set
        {
            _usageRightsAccepted = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (await localStorage.ContainKeyAsync("permAppState"))
        {
            // Read the user data if available from browser storage
            PermAppState permAppState = await localStorage.GetItemAsync<PermAppState>("permAppState");
            // Copy the settings needed to application state
            AppStateStore.KeyWord = permAppState.KeyWord;
            AppStateStore.FirstName = permAppState.FirstName;
            AppStateStore.LastName = permAppState.LastName;
            AppStateStore.PhoneMail = permAppState.PhoneMail;
            AppStateStore.PrivateKeyWord1 = permAppState.PrivateKeyWord1;
            AppStateStore.PrivateKeyWord2 = permAppState.PrivateKeyWord2;
            AppStateStore.PrivateKeyWord2 = permAppState.PrivateKeyWord2;
            AppStateStore.NoAddressNeeded = permAppState.NoAddressNeeded;
            // If someone has stored the settings before the disclaimer has already been accepted by user
            UsageRightsAccepted = true;
        }

        // Get client settings from server
        PrepareHttpClient();
        try
        {
            TenantClientSettings tenantClientSettings = await Http.GetFromJsonAsync<TenantClientSettings>("Util/tenantclientsettings");
            AppStateStore.Tenant = tenantClientSettings.Tenant;
            AppStateStore.ClientSettings = tenantClientSettings.Client;
        }
        catch(Exception ex)
        {
            _hideAlert = false;
            _disableStartButton = true;
            _alertMessage = $"<p>Der MeetUpPlanner ist momentan offline, bitte später noch einmal versuchen.</p><p>Fehlermeldung: {ex.Message}</p>";
        }
        if (AppStateStore.Tenant.IsLocked || AppStateStore.ClientSettings.AppLocked)
        {
            _hideAlert = false;
            _alertMessage = AppStateStore.Tenant.LockMessage;
            if (AppStateStore.ClientSettings.AppLocked)
            {
                _alertMessage = AppStateStore.ClientSettings.LockedMessage;
            }
            if (String.IsNullOrEmpty(_alertMessage))
            {
                _alertMessage = "<p>Der Zugang zum MeetUpPlanner ist zur Zeit gesperrt.";
            }
        }

        // Reset user status
        KeywordCheck.IsUser = false;
        KeywordCheck.IsAdmin = false;
        AppStateStore.NotifyStateChanged();
    }

    private async Task CheckKeyword()
    {
        // Keyword check at server side
        AppStateStore.KeyWord = AppStateStore.KeyWord.Trim();
        PrepareHttpClient();
        try
        {
            KeywordCheck keywordCheck = await Http.GetFromJsonAsync<KeywordCheck>($"Util/checkkeyword");
            KeywordCheck.IsAdmin = keywordCheck.IsAdmin;
            KeywordCheck.IsUser = keywordCheck.IsUser;
        } catch (Exception ex)
        {
            _hideAlert = false;
            _disableStartButton = true;
            _alertMessage = $"<p>Der MeetUpPlanner ist momentan offline, bitte später noch einmal versuchen.</p><p>Fehlermeldung: {ex.Message}</p>";
        }
        AppStateStore.NotifyStateChanged();
        if (!KeywordCheck.IsUser && !KeywordCheck.IsAdmin)
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Schlüsselwort", Detail = "Das eingegebene Schlüsselwort ist leider falsch.", Duration = 4000 });
        }
        AppStateStore.FirstName = AppStateStore.FirstName.Trim();
        AppStateStore.LastName = AppStateStore.LastName.Trim();
        AppStateStore.PhoneMail = AppStateStore.PhoneMail.Trim();
        if (AppStateStore.SaveSettings)
        {
            // Copy from app state to permanent storage
            PermAppState permAppState = new PermAppState();
            permAppState.KeyWord = AppStateStore.KeyWord;
            permAppState.FirstName = AppStateStore.FirstName;
            permAppState.LastName = AppStateStore.LastName;
            permAppState.PhoneMail = AppStateStore.PhoneMail;
            permAppState.PrivateKeyWord1 = AppStateStore.PrivateKeyWord1;
            permAppState.PrivateKeyWord2 = AppStateStore.PrivateKeyWord2;
            permAppState.PrivateKeyWord2 = AppStateStore.PrivateKeyWord2;
            permAppState.NoAddressNeeded = AppStateStore.NoAddressNeeded;
            await localStorage.SetItemAsync<PermAppState>("permAppState", permAppState);
        }
        else
        {
            await localStorage.RemoveItemAsync("permAppState");
        }
        if (KeywordCheck.IsUser)
        {
            if (AppStateStore.Tenant.IsLocked || (AppStateStore.ClientSettings.AppLocked && !KeywordCheck.IsAdmin))
            {
                KeywordCheck.IsUser = false;
                if (AppStateStore.Tenant.IsLocked)
                {
                    // If locked on tenant level disabe admin access, too
                    KeywordCheck.IsAdmin = false;
                }
                AppStateStore.NotifyStateChanged();
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Kein Zugang", Detail = "Der MeetUpPlanner ist zur Zeit gesperrt.", Duration = 4000 });
            }
            else
            {
                NavigationManager.NavigateTo("calendar");
            }
        }
    }
    private void PrepareHttpClient()
    {
        if (null != AppStateStore.Tenant?.TenantKey)
        {
            if (!Http.DefaultRequestHeaders.Contains("x-meetup-tenant"))
            {
                Http.DefaultRequestHeaders.Add("x-meetup-tenant", AppStateStore.Tenant.TenantKey);
            }
        }
        if (!Http.DefaultRequestHeaders.Contains("x-meetup-tenant-url"))
        {
            Http.DefaultRequestHeaders.Add("x-meetup-tenant-url", NavigationManager.BaseUri);
        }
        Http.DefaultRequestHeaders.Remove("x-meetup-keyword");
        Http.DefaultRequestHeaders.Add("x-meetup-keyword", AppStateStore.KeyWord);

    }

}


