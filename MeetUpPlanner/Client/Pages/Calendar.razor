@page "/calendar"
@using MeetUpPlanner.Shared
@using CurrieTechnologies.Razor.Clipboard
@inject AppState AppStateStore
@inject KeywordCheck KeywordCheck
@inject HttpClient Http
@inject BackendApiRepository Api
@inject NavigationManager NavigationManager
@inject NotificationService notificationService
@inject DialogService dialogService
@inject BlazorTimer Timer
@inject BlazorTimer Timer2
@inject IJSRuntime JSRuntime
@inject ClipboardService clipboard
@implements IDisposable
@using Newtonsoft.Json
@using System.IO
@using Microsoft.AspNetCore.SignalR.Client

<MessageBoard Message="@AppStateStore.ClientSettings?.WhiteboardMessage" ShowLogo="false" />
<h1>Ausfahrten</h1>
<p>
    <a class="btn btn-primary" href="/newmeetup" title="Neue Ausfahrt" hidden="@(!KeywordCheck.IsUser || _onlyAdminsAsHost && !KeywordCheck.IsAdmin)">Neue Ausfahrt erstellen</a>
    <a class="btn btn-primary" href="/routes" title="Routen" hidden="@(!AppStateStore.Tenant.TracksEnabled)">Routen</a>
    <button class="btn btn-primary" title="Reload" @onclick="@(() => Reload())"><span class="oi oi-reload"></span></button>
    @if (KeywordCheck.IsAdmin)
    {
        <button class="btn btn-primary" @onclick="@(() => BackwardSelectedDate())" title="Vorheriger Tag"><span class="oi oi-media-step-backward"></span></button>
        @if (ShowHistory())
        {
            <button class="btn btn-primary" @onclick="@(() => ForwardSelectedDate())" title="Nächster Tag"><span class="oi oi-media-step-forward"></span></button>
        }
    }
    <a class="btn btn-primary" title="Hilfe" href="@AppStateStore.ClientSettings?.HelpLink" target="_blank"><span class="oi oi-question-mark"></span></a>
</p>
<div class="row">
    <div class="col">
        @if (ShowHistory())
        {
            <span>@selectedDate.ToString("D")</span>
        }
    </div>
</div>

<div class="row">
    @foreach (ExtendedInfoItem infoItem in introInfoItems)
    {
        <div class="col-12 col-sm-6 col-lg-4 col-xl-4 mt-2">
            <InfoCard InfoItem="@infoItem" IsAdmin="@KeywordCheck.IsAdmin" OnChangeCallback="@(e => ReadData())"></InfoCard>
        </div>
    }
    @foreach (ExtendedCalendarItem item in calendarItems)
    {
        <div class="col-12 col-sm-6 col-lg-4 col-xl-4 mt-2">
            <div class="card">
                <div class="card-header">
                    <em>
                        @item.GetStartDateAsString() - @item.Place
                        @if (!String.IsNullOrEmpty(item.DirectionsLink))
                        {
                            <a href="@item.DirectionsLink" class="btn btn-outline-success btn-sm" role="button" target="_blank" tite="Startort"><span class="oi oi-map-marker"></span></a>
                        }
                    </em>
                    @if (item.IsInternal)
                    {
                        <span class="badge badge-danger"><span class="oi oi-key" title="Vereinsintern"></span></span>
                    }
                    @if (!String.IsNullOrEmpty(item.PrivateKeyword))
                    {
                        <span class="badge badge-danger"><span class="oi oi-key" title="Private Ausfahrt"></span> @item.PrivateKeyword</span>
                    }
                    <span class="badge badge-warning" hidden="@(!item.IsCross)">Cross</span>
                    <span class="badge badge-secondary" hidden="@(!item.IsTraining)">Training</span>
                    <span class="badge badge-success" hidden="@(!IsFederated(item))">@item.FederatedFrom</span>
                    <span class="badge badge-info" hidden="@(!item.IsKids)">Pänz</span>
                    <span class="badge badge-info" hidden="@(!item.IsYouth)">Jugend</span>
                    @{
                        string badge = GetCalendarBadge(item);
                        if (!String.IsNullOrEmpty(badge))
                        {
                            <span class="badge badge-info">@badge</span>
                        }
                    }
                </div>
                @if (!String.IsNullOrEmpty(item.LinkImage))
                {
                    <a href="@item.Link" target="_blank">
                        <img class="card-img-top" src="@item.LinkImage" alt="@item.LinkTitle">
                    </a>
                }
                <div class="card-body">
                    <h6 class="text-muted card-subtitle mb-2">
						@if (!String.IsNullOrEmpty(item.SubTitle))
						{
							@item.SubTitle
						} else
                        {
                            @($"{item.LevelDescription} - {item.Tempo}")
                        }
                    </h6>
                    <h5 class="card-title">
                        @item.Title
                        @if (item.IsCanceled)
                        {
                            <span class="badge badge-danger" title="Abgesagt">Abgesagt!</span>
                        }
                    </h5>
                    <p class="card-text">
                        <div class="overflow-auto" style="max-height: 500px">
                            @((MarkupString)item.Summary)
                            @if (!String.IsNullOrEmpty(item.AttachedInfoType))
                            {
                                <DynamicComponent Type="@GetAttachedInfoType(item)" Parameters="@GetAttachedInfoParameters(item)"></DynamicComponent>
                            }
                        </div>
                        @if (KeywordCheck.IsAdmin && item.PublishDate.ToLocalTime().CompareTo(DateTime.Now) > 0)
                        {
                            <small><em>Veröffentlichung @item.GetPublishDateAsString()</em></small>
                        }
                        @if (!String.IsNullOrEmpty(item.GuestScope))
                        {
                            <div>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="(async e => await clipboard.WriteTextAsync(GetScopeLink(item)))" title="In die Zwischenablage kopieren"><span class="oi oi-clipboard"></span></button>
                                <small><em>Link <a href="/@item.GuestScope" target="_blank">/@item.GuestScope</a></em></small>
                            </div>
                        }
                        @if (!String.IsNullOrEmpty(item.RouteLink))
                        {
                            <div>
                                <small><em>Route <a href="@item.RouteLink" target="_blank">@item.RouteLink</a></em></small>
                            </div>
                        }
                        <hr />
                        <small>Dabei (@item.ParticipantCounter von @item.MaxRegistrationsCount)</small>
                        @if (item.ParticipantCounter < item.MinRegistrationsCount)
                        {
                            <span class="badge badge-danger" title="Mindestteilnehmerzahl">Min @item.MinRegistrationsCount</span>
                        }
                        <small>: <b>@item.HostDisplayName(AppStateStore.ClientSettings.NameDisplayLength)</b>@((MarkupString)item.ParticipantsDisplay(AppStateStore.ClientSettings.NameDisplayLength, AppStateStore.FirstName, AppStateStore.LastName))</small>
                        @if (0 < item.WaitingListCounter)
                        {
                            <hr />
                            <small>Warteliste (@item.WaitingListCounter von @item.MaxWaitingList): @item.WaitingListDisplay(AppStateStore.ClientSettings.NameDisplayLength, AppStateStore.FirstName, AppStateStore.LastName)</small>
                        }
                        @if (item.IsKidsOrYouth())
                        {
                            <hr />
                            <small><b>Trainer:in(nen):</b> @item.Trainer</small>
                        }
                        <hr />
                        @if (item.CommentsList.Count() > 0)
                        {
                            <ul class="list-unstyled">
                                @foreach (CalendarComment c in item.GetMostRecentComments(commentsToDisplay))
                                {
                                    <li>
                                        <small>
                                            <em>@c.AuthorDisplayName(AppStateStore.ClientSettings.NameDisplayLength) (@c.DisplayDate): </em>@c.Comment
                                            @if (!String.IsNullOrEmpty(c.Link))
                                            {
                                                <text>&nbsp;</text><a title="@c.DisplayLinkTitle" target="_blank" href="@c.Link">@c.DisplayLinkTitle</a>
                                            }
                                        </small>
                                    </li>
                                }
                                @if(!item.HideOlderCommments)
                                {
                                    @foreach (CalendarComment c in item.GetOlderComments(commentsToDisplay))
                                    {
                                        <li>
                                            <small>
                                                <em>@c.AuthorDisplayName(AppStateStore.ClientSettings.NameDisplayLength) (@c.DisplayDate): </em>@c.Comment
                                                @if (!String.IsNullOrEmpty(c.Link))
                                                {
                                                    <text>&nbsp;</text><a title="@c.DisplayLinkTitle" target="_blank" href="@c.Link">@c.DisplayLinkTitle</a>
                                                }
                                            </small>
                                        </li>
                                    }
                                } else if (item.CommentsCounter > commentsToDisplay)
                                {
                                    <li>
                                        <button class="btn btn-link text-left" type="button" @onclick="e => item.HideOlderCommments = false"><small><em>mehr ...</em></small></button>
                                    </li>
                                }
                            </ul>
                            <hr />
                        }
                    </p>
                    @if (!String.IsNullOrEmpty(item.Link))
                    {
                        <a href="@item.Link" target="_blank" class="card-link">@item.DisplayLinkTitle</a>
                    }
                </div>
                <div class="card-footer">
                    <div class="btn-toolbar" role="toolbar" aria-label="Aktionen zur Ausfahrt">
                        <div class="btn-group mr-2" role="group" aria-label="Ändern">
                            @if (IsFederated(item))
                            {
                                if (KeywordCheck.IsAdmin)
                                {
                                    <button class="btn btn-sm btn-outline-secondary" title="Einladung ablehnen" @onclick="@(() => RemoveFederation(item))"><span class="oi oi-x"></span></button>
                                }
                            }
                            else if (CheckIfUserIsHost(item) || KeywordCheck.IsAdmin)
                            {
                                <button class="btn btn-sm btn-outline-secondary" title="Ändern" @onclick="@(() => EditCalendarItem(item.Id))"><span class="oi oi-pencil"></span></button>
                                <button class="btn btn-sm btn-outline-secondary" title="Kopieren" @onclick="@(() => ConfirmClone(item))"><span class="oi oi-fork"></span></button>
                                <button class="btn btn-sm btn-outline-secondary" title="Löschen" @onclick="@(() => DeleteCalendarItem(item))"><span class="oi oi-trash"></span></button>
                                <button class="btn btn-sm btn-outline-secondary" title="Absagen" @onclick="@(() => CancelMeetUp(item))"><span class="oi oi-x"></span></button>
                                <button class="btn btn-sm btn-outline-secondary" title="Teilnehmer" @onclick="@(() => ShowParticipants(item))"><span class="oi oi-people"></span></button>
                                @if (item.ParticipantCounter > 1)
                                {
                                    <button class="btn btn-sm btn-outline-secondary" title="Neuer Guide" @onclick="@(() => AssignNewHost(item))"><span class="oi oi-share-boxed"></span></button>
                                }
                            }
                        </div>
                        <div class="btn-group mr-2" role="group" aria-label="Teilnehmen">
                            <button class="btn btn-sm btn-outline-secondary" title="Kommentieren" @onclick="@(() => ShowComment(item))"><span class="oi oi-comment-square"></span></button>
                            @if (AppStateStore.ClientSettings.GuestsEnabled && !ShowHistory())
                            {
                                <button class="btn btn-sm btn-outline-secondary" title="Gast einladen" @onclick="@(() => Invite(item))"><span class="oi oi-external-link"></span></button>
                            }
                            @if (CheckIfUserIsHost(item) || KeywordCheck.IsAdmin)
                            {
                                <button class="btn btn-sm btn-outline-secondary" title="Andere an/abmelden" @onclick="@(() => RegisterOthers(item))"><span class="oi oi-transfer"></span></button>
                            }
                            @if (!CheckIfUserIsHostWithoutKeyword(item) && !CheckIfUserIsHost(item) && !ShowHistory())
                            {
                                <button class="btn btn-sm btn-outline-secondary" title="@GetCheckInLabel(item)" disabled="@checkInDisabled" hidden="@(CheckIfUserIsAlreadyRegistered(item) || item.IsCanceled)" @onclick="@(() => Checkin(item.Id))">@GetCheckInLabel(item)</button>
                                <button class="btn btn-sm btn-outline-secondary" title="@GetCheckInAsCoGuideLabel(item)" disabled="@checkInDisabled" hidden="@(!CheckIfCoGuideIsWanted(item) || item.IsCanceled)" @onclick="@(() => CheckinAsCoGuide(item.Id))">@GetCheckInAsCoGuideLabel(item)</button>
                                <button class="btn btn-sm btn-outline-secondary" title="Abmelden" hidden="@(!CheckIfUserIsAlreadyRegistered(item))" @onclick="@(() => Checkout(item))">Abmelden</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    @foreach (ExtendedInfoItem infoItem in epilogInfoItems)
    {
        <div class="col-12 col-sm-6 col-lg-4 col-xl-4 mt-2">
            <InfoCard InfoItem="@infoItem" IsAdmin="@KeywordCheck.IsAdmin" OnChangeCallback="@(e => ReadData())"></InfoCard>
        </div>
    }
</div>

@code {
    private IList<ExtendedCalendarItem> calendarItems = new List<ExtendedCalendarItem>();
    private IList<ExtendedInfoItem> infoItems = new List<ExtendedInfoItem>();
    private IList<ExtendedInfoItem> introInfoItems = new List<ExtendedInfoItem>();
    private IList<ExtendedInfoItem> epilogInfoItems = new List<ExtendedInfoItem>();
    const double refreshInterval = 30000;
    const double navigateAwayInterval = 10 * 60 * 1000;
    const int commentsToDisplay = 5;
    private HubConnection hubConnection;
    private ExtendedCalendarItem calendarItemToBeCloned = null;
    private DateTime selectedDate = DateTime.Today;
    private Boolean _onlyAdminsAsHost = false;
    private Boolean checkInDisabled = false;


    protected override async Task OnInitializedAsync()
    {
        if (null != AppStateStore && KeywordCheck.IsParticipant)
        {
            _onlyAdminsAsHost = AppStateStore.ClientSettings.OnlyAdminsAsHost;
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
                .Build();

            hubConnection.On("ReceiveMessage", () =>
            {
                try
                {
                    CallReadData();
                    StateHasChanged();
                }
                catch (Exception)
                {
                }
            });
            hubConnection.Closed += async (error) =>
            {
                await Task.Delay(new Random().Next(0, 5) * 1000);
                try
                {
                    await hubConnection.StartAsync();
                }
                catch (Exception)
                {
                }
            };

            await hubConnection.StartAsync();

            // Polling with timer only if SignalR has problems
            //Timer.SetTimer(refreshInterval);
            //Timer.OnElapsed += TimerElapsedHandler;
            //Timer2.SetTimer(navigateAwayInterval);
            //Timer2.OnElapsed += NavigateAwayHandler;

            await ReadData();
            dialogService.OnClose += CloneConfirmed;

            await RequestNotificationSubscriptionAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    protected async Task ReadData()
    {
        string privateKeywords = AppStateStore.PrivateKeyWord1 + ";" + AppStateStore.PrivateKeyWord2 + ";" + AppStateStore.PrivateKeyWord3; ;
        // Get list of calendar items
        PrepareHttpClient();
        try
        {
            if (!ShowHistory())
            {
                calendarItems = await Http.GetFromJsonAsync<IList<ExtendedCalendarItem>>($"calendar/extendedcalendaritems?privatekeywords={privateKeywords}");
            }
            else
            {
                string dateArg = selectedDate.ToString("yyyy-MM-dd");
                calendarItems = await Http.GetFromJsonAsync<IList<ExtendedCalendarItem>>($"calendar/extendedcalendaritemsfordate?privatekeywords={privateKeywords}&requesteddate={dateArg}");
            }
            infoItems = await Http.GetFromJsonAsync<IList<ExtendedInfoItem>>($"api/info/extendedinfoitems");
            introInfoItems.Clear();
            epilogInfoItems.Clear();
            // Get all items to be presented in front of the calendar
            foreach (ExtendedInfoItem infoItem in infoItems)
            {
                if (infoItem.OrderId < 0)
                {
                    introInfoItems.Add(infoItem);
                }
                else
                {
                    epilogInfoItems.Add(infoItem);
                }
            }
        }
        catch (Exception ex)
        {
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Offline",
                Detail = $"Momentan gibt es keine Netzverbindung oder die Anwendung offline. Fehlermeldung: {ex.Message}",
                Duration = 4000
            });
        }
        StateHasChanged();
    }
    protected async Task Reload()
    {

        try
        {
            if (null != hubConnection && hubConnection.State == HubConnectionState.Disconnected)
            {
                await hubConnection.StartAsync();
            }
        }
        catch (Exception)
        {
        }
        selectedDate = DateTime.Today;
        await ReadData();
    }
    private void CallReadData()
    {
        Task.Run(async () =>
        {
            await ReadData();
        });
    }

    protected void EditCalendarItem(string itemId)
    {
        NavigationManager.NavigateTo($"/NewMeetUp/{itemId}");
    }

    protected void ConfirmClone(ExtendedCalendarItem c)
    {
        calendarItemToBeCloned = c;
        dialogService.Confirm("Termin für nächste Woche kopieren?", "Termin kopieren", new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nein" });
    }

    protected async void CloneConfirmed(dynamic result)
    {
        bool? removeIt = result;
        if (null != removeIt && null != calendarItemToBeCloned)
        {
            if ((bool)removeIt)
            {
                await CloneCalendarItem(calendarItemToBeCloned);
            }
        }
        calendarItemToBeCloned = null;
    }


    protected async Task CloneCalendarItem(ExtendedCalendarItem calendarItem)
    {
        calendarItem.Id = null; // to create a new one
        calendarItem.StartDate = calendarItem.StartDate.AddDays(7.0);
        calendarItem.IsCanceled = false;
        if (KeywordCheck.IsAdmin)
        {
            calendarItem.PublishDate = calendarItem.PublishDate.AddDays(7.0);
        }
        PrepareHttpClient();
        // Save calendarItem server
        await Http.PostAsJsonAsync<CalendarItem>($"Calendar/writecalendaritem", calendarItem);
        if (IsConnected) await SendMessage();
        await ReadData();
    }
    protected async Task CancelMeetUp(ExtendedCalendarItem calendarItem)
    {
        calendarItem.IsCanceled = !calendarItem.IsCanceled;
        PrepareHttpClient();
        // Save calendarItem server
        await Http.PostAsJsonAsync<CalendarItem>($"Calendar/writecalendaritem", calendarItem);
        if (IsConnected) await SendMessage();
        if (calendarItem.IsCanceled)
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Abgesagt", Detail = "Um die Absage rückgänig zu machen, einfach noch einmal den Button drücken.", Duration = 4000 });
        }
        //await ReadData();
    }
    protected async Task RemoveFederation(ExtendedCalendarItem calendarItem)
    {
        await Api.RemoveFederation(calendarItem);
        await ReadData();
    }
    protected async Task Checkin(string itemId)
    {
        Participant participant = new Participant();
        participant.ParticipantFirstName = AppStateStore.FirstName;
        participant.ParticipantLastName = AppStateStore.LastName;
        participant.ParticipantAdressInfo = AppStateStore.PhoneMail;
        participant.IsIncognito = AppStateStore.Incognito;
        participant.CalendarItemId = itemId;
        checkInDisabled = true;
        StateHasChanged();
        BackendResult result = await Api.AddParticipant(participant);
        if (result.Success)
        {
            if (IsConnected) await SendMessage();
            // Read data again
            await ReadData();
            foreach (ExtendedCalendarItem c in calendarItems)
            {
                if (c.Id.Equals(itemId))
                {
                    participant = c.FindParticipant(participant.ParticipantFirstName, participant.ParticipantLastName);
                    break;
                }
            }
            if (null != participant && participant.IsWaiting )
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Warteliste", Detail = "Du stehst jetzt auf der Warteliste. Falls du doch nicht dabei sein kannst, melde dich bitte wieder ab.", Duration = 4000 });
            }
            else
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Angemeldet", Detail = "Du bist jetzt angemeldet. Falls du doch nicht dabei sein kannst, melde dich bitte wieder ab.", Duration = 4000 });
            }
            // Read data again
            await ReadData();
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Fehler", Detail = result.Message, Duration = 4000 });
        }
        checkInDisabled = false;
    }
    protected async Task CheckinAsCoGuide(string itemId)
    {
        Participant participant = new Participant();
        participant.ParticipantFirstName = AppStateStore.FirstName;
        participant.ParticipantLastName = AppStateStore.LastName;
        participant.ParticipantAdressInfo = AppStateStore.PhoneMail;
        participant.CalendarItemId = itemId;
        participant.IsCoGuide = true;
        participant.IsIncognito = false;
        checkInDisabled = true;
        StateHasChanged();
        PrepareHttpClient();
        HttpResponseMessage response = await Http.PostAsJsonAsync<Participant>($"Calendar/addparticipantascoguide", participant);
        string responseBody = await response.Content.ReadAsStringAsync();

        BackendResult result = JsonConvert.DeserializeObject<BackendResult>(responseBody);
        if (result.Success)
        {
            if (IsConnected) await SendMessage();
            // Read data again
            await ReadData();
            foreach (ExtendedCalendarItem c in calendarItems)
            {
                if (c.Id.Equals(itemId))
                {
                    participant = c.FindParticipant(participant.ParticipantFirstName, participant.ParticipantLastName);
                    break;
                }
            }
            if (null != participant && participant.IsWaiting)
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Warteliste", Detail = "Du stehst jetzt auf der Warteliste. Falls du doch nicht dabei sein kannst, melde dich bitte wieder ab.", Duration = 4000 });
            }
            else
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Angemeldet", Detail = "Du bist jetzt angemeldet. Falls du doch nicht dabei sein kannst, melde dich bitte wieder ab.", Duration = 4000 });
            }
            // Read data again
            await ReadData();
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Fehler", Detail = result.Message, Duration = 4000 });
        }
        checkInDisabled = false;
    }
    protected async Task Checkout(ExtendedCalendarItem calendarItem)
    {
        // Find corresponding participant item
        Participant participant = calendarItem.FindParticipant(AppStateStore.FirstName, AppStateStore.LastName);

        BackendResult result = await Api.RemoveParticipant(participant);
        if (result.Success)
        {
            if (IsConnected) await SendMessage();
            await ReadData();
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Fehler", Detail = result.Message, Duration = 4000 });
        }
    }
    protected bool CheckIfUserIsAlreadyRegistered(ExtendedCalendarItem calendarItem)
    {
        bool alreadyRegistered = calendarItem.FindParticipant(AppStateStore.FirstName, AppStateStore.LastName) != null;
        return alreadyRegistered;
    }
    protected bool CheckIfCoGuideIsWanted(ExtendedCalendarItem calendarItem)
    {
        Participant registered = calendarItem.FindParticipant(AppStateStore.FirstName, AppStateStore.LastName);
        return (KeywordCheck.IsUser && calendarItem.MaxCoGuidesCount > 0 && (null == registered || !registered.IsCoGuide));
    }
    protected bool CheckIfUserIsHost(ExtendedCalendarItem calendarItem)
    {
        bool isHost = !calendarItem.WithoutHost && KeywordCheck.IsUser && (calendarItem.HostFirstName.Equals(AppStateStore.FirstName) && calendarItem.HostLastName.Equals(AppStateStore.LastName));
        return isHost;
    }
    protected bool CheckIfUserIsHostWithoutKeyword(ExtendedCalendarItem calendarItem)
    {
        bool isHost = !calendarItem.WithoutHost && !KeywordCheck.IsUser && (calendarItem.HostFirstName.Equals(AppStateStore.FirstName) && calendarItem.HostLastName.Equals(AppStateStore.LastName));
        return isHost;
    }
    private async void TimerElapsedHandler()
    {
        await ReadData();
        Timer.SetTimer(refreshInterval);
        StateHasChanged();
    }
    private void NavigateAwayHandler()
    {
        NavigationManager.NavigateTo("/");
    }
    protected void ShowComment(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/Comment/{calendarItem.Id}");
    }
    protected void ShowParticipants(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/Participants/{calendarItem.Id}");
    }
    protected void Invite(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/Invite/{calendarItem.Id}");
    }
    protected void RegisterOthers(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/RegisterOthers/{calendarItem.Id}");
    }
    protected void DeleteCalendarItem(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/ConfirmDelete/{calendarItem.Id}");
    }
    protected void AssignNewHost(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/AssignNewHost/{calendarItem.Id}");
    }
    private Type GetAttachedInfoType(ExtendedCalendarItem calendarItem)
    {
        return Type.GetType($"MeetUpPlanner.Client.Shared.{calendarItem.AttachedInfoType}");
    }
    private IDictionary<string, object> GetAttachedInfoParameters(ExtendedCalendarItem calendarItem)
    {
        Dictionary<string, object> attachedInfoParameters = new Dictionary<string, object>();
        attachedInfoParameters.Add("Key", calendarItem.AttachedInfoKey);
        return attachedInfoParameters;
    }
    public void Dispose()
    {
        if (null != hubConnection)
        {
            try
            {
                _ = hubConnection.DisposeAsync();
            }
            catch (Exception)
            {

            }
        }
        // only if Timer is used instead of SignalR
        // Timer.DisableTimer();
        // Timer2.DisableTimer();
    }
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    private string GetCalendarBadge(ExtendedCalendarItem calendarItem)
    {
        string badge = null;
        DayOfWeek weekday = calendarItem.StartDate.DayOfWeek;
        switch (weekday)
        {
            case DayOfWeek.Monday:
                badge = AppStateStore.ClientSettings.MondayBadge;
                break;
            case DayOfWeek.Tuesday:
                badge = AppStateStore.ClientSettings.TuesdayBadge;
                break;
            case DayOfWeek.Wednesday:
                badge = AppStateStore.ClientSettings.WednesdayBadge;
                break;
            case DayOfWeek.Thursday:
                badge = AppStateStore.ClientSettings.ThursdayBadge;
                break;
            case DayOfWeek.Friday:
                badge = AppStateStore.ClientSettings.FridayBadge;
                break;
            case DayOfWeek.Saturday:
                badge = AppStateStore.ClientSettings.SaturdayBadge;
                break;
            case DayOfWeek.Sunday:
                badge = AppStateStore.ClientSettings.SundayBadge;
                break;
        }


        return badge;
    }
    private string GetCheckInLabel(ExtendedCalendarItem calendarItem)
    {
        string checkInLabel = "Anmelden";
        if (calendarItem.ParticipantCounter >= calendarItem.MaxRegistrationsCount && calendarItem.MaxWaitingList > 0)
        {
            checkInLabel = "Auf Warteliste";

        }
        return checkInLabel;
    }
    private string GetCheckInAsCoGuideLabel(ExtendedCalendarItem calendarItem)
    {
        string checkInLabel = "als Co-Guide";
        return checkInLabel;
    }
    private string GetScopeLink(ExtendedCalendarItem calendarItem)
    {
        return $"{Http.BaseAddress}{calendarItem.GuestScope}";
    }

    private void PrepareHttpClient()
    {
        if (null != AppStateStore.Tenant?.TenantKey)
        {
            if (!Http.DefaultRequestHeaders.Contains("x-meetup-tenant"))
            {
                Http.DefaultRequestHeaders.Add("x-meetup-tenant", AppStateStore.Tenant.TenantKey);
            }
        }
        if (!Http.DefaultRequestHeaders.Contains("x-meetup-keyword"))
        {
            Http.DefaultRequestHeaders.Add("x-meetup-keyword", AppStateStore.KeyWord);
        }

    }
    private bool ShowHistory()
    {
        return selectedDate.CompareTo(DateTime.Today) < 0;
    }

    private async Task ForwardSelectedDate()
    {
        selectedDate = selectedDate.AddDays(1.0);
        await ReadData();
    }
    private async Task BackwardSelectedDate()
    {
        selectedDate = selectedDate.AddDays(-1.0);
        await ReadData();
    }

    async Task RequestNotificationSubscriptionAsync()
    {
        if (AppStateStore.NotificationSubscriptionRequested)
        {
            return;
        }
        try
        {
            AppStateStore.NotificationSubscriptionRequested = true;
            var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
            if (null != subscription)
            {
                subscription.UserFirstName = AppStateStore.FirstName;
                subscription.UserLastName = AppStateStore.LastName;
                subscription.PlannerUrl = Http.BaseAddress.ToString();
                PrepareHttpClient();
                await Http.PostAsJsonAsync<NotificationSubscription>($"util/writenotificationsubscription", subscription);
            }
        }
        catch (Exception)
        {
            // no push messages supported
            // notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Fehler", Detail = ex.Message, Duration = 4000 });
        }
    }
    bool IsFederated(ExtendedCalendarItem calendarItem)
    {
        return calendarItem.IsFederated() && calendarItem.FederatedFrom != AppStateStore.Tenant.FederationKey;
    }

}


