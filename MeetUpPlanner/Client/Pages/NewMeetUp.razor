@page "/newmeetup"
@page "/newmeetup/{ItemId}"
@inject HttpClient Http
@inject RouteApiRepository RouteApi
@inject AppState AppStateStore
@inject KeywordCheck KeywordCheck
@inject NavigationManager NavigationManager
@inject NotificationService notificationService
@using Newtonsoft.Json
@using System.Text 
@using Microsoft.AspNetCore.SignalR.Client
@using MeetUpPlanner.Shared
@using Blazored.TextEditor

<MessageBoard Message="@AppStateStore.ClientSettings?.NewMeetupMessage" ShowLogo="false" />
<h1>Ausfahrt</h1>
<EditForm Model="@meetup" OnValidSubmit="OnSave">
    <DataAnnotationsValidator />

    @if (String.IsNullOrEmpty(ItemId) && AppStateStore.Tenant.TracksEnabled && !String.IsNullOrEmpty(AppStateStore.ClientSettings.RouteTagForQuickSelection) && null != _standardRoutes && _standardRoutes.Count() > 0)
    {
        <div class="form-group">
            <label for="SelectMeetingPlace">Auswahl Standard-Route</label>
            <select class="form-control" @onchange="@((ChangeEventArgs e) => OnStandardRouteChanged(e.Value.ToString()))">
                <option value=""></option>
                @foreach (ExtendedRoute r in _standardRoutes)
                {
                    <option value="@r.Core.Id">@r.Core.Title</option>
                }
            </select>
            <small id="standardPlaceHelp" class="form-text text-muted">
                Optional: Hier kannst du schnell eine Standard-Route auswählen.
            </small>
        </div>

    }
    <div class="form-group">
        <label for="title">Titel</label>
        <InputText id="title" aria-describedby="titleHelp" class="form-control" @bind-Value="meetup.Title" autocomplete="on" placeholder="Kurzer Titel der Ausfahrt" title="Titel" />
        <small id="titleHelp" class="form-text text-muted">
            Kurzer Titel zur Ausfahrt als Überschrift.
        </small>
    </div>
    <div class="form-group">
        <label>Beschreibung zur Tour</label>
        <BlazoredTextEditor @ref="@htmlDescription" Placeholder="Mehr oder weniger ausführliche Beschreibung der Tour">
            <ToolbarContent>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>
                @if (!String.IsNullOrEmpty(meetup.Summary))
                {@((MarkupString)meetup.Summary)}
            </EditorContent>
        </BlazoredTextEditor>
    </div>
    <div class="form-row">
        <div class="form-group col-md-3">
            <label for="whenDate">Datum</label>
            @if (onlyScopedMeetUps)
            {
                <InputSelect @bind-Value="whenDateString" class="form-control">
                    @foreach (KeyValuePair<string, string> c in GetScopedDays())
                    {
                        <option value="@c.Key">@c.Value</option>
                    }
                </InputSelect>
            }
            else
            {
                <InputDate id="whenDate" aria-describedby="whenDateHelp" class="form-control" @bind-Value="whenDate" title="Startdatum" />
            }
            <small id="whenDateHelp" class="form-text text-muted">
                Wann geht's los?
            </small>
        </div>
        <div class="form-group col-md-3">
            <label for="whenTime">Uhrzeit</label>
            <input type="time" class="form-control" @bind="@whenTime" title="Startzeit" />
        </div>
    </div>
    <div class="form-group">
        <label for="SelectMeetingPlace">Auswahl Standard-Startort</label>
        <select class="form-control" @onchange="@((ChangeEventArgs e) => OnMeetingPlaceChanged(e.Value.ToString()))">
            <option value=""></option>
            @foreach (MeetingPlace place in _meetingPlaces)
            {
                <option value="@place.Id">@place.Title</option>
            }
        </select>
        <small id="standardPlaceHelp" class="form-text text-muted">
            Hier sind die Standard-Treffpunkte zur Auswahl.
        </small>
    </div>
    <div class="form-group">
        <label for="place">Startort</label>
        <InputText id="place" aria-describedby="placeHelp" class="form-control" @bind-Value="meetup.Place" autocomplete="on" placeholder="Startpunkt der Ausfahrt" />
        <small id="placeHelp" class="form-text text-muted">
            Treffpunkt der Gruppe für die Ausfahrt.
        </small>
    </div>
    <div class="form-group">
        <label for="link">Link zum Startort</label>
        <InputText id="directionsLink" aria-describedby="directionsLinkHelp" class="form-control" @bind-Value="meetup.DirectionsLink" placeholder="URL" title="Link zum Startort" />
        <small id="directionsLinkHelp" class="form-text text-muted">
            Optional: Link zum Startort, z.B. Google Maps, Bing usw.
        </small>
    </div>
    <div class="form-group">
        <label for="level">Länge</label>
        <InputText id="level" aria-describedby="levelHelp" class="form-control" @bind-Value="meetup.LevelDescription" autocomplete="on" placeholder="km / Hm" />
        <small id="levelHelp" class="form-text text-muted">
            Länge der Tour (zumindest ungefähr) und möglichst Höhenmeter oder auch ungefähre Fahrtzeit.
        </small>
    </div>
    <div class="form-group">
        <label for="tempo">Tempo</label>
        <InputText id="tempo" aria-describedby="tempoHelp" class="form-control" @bind-Value="meetup.Tempo" autocomplete="on" placeholder="Geplante Geschwindigkeit" />
        <small id="tempoHelp" class="form-text text-muted">
            Hinweise zur Geschwindigkeit.
        </small>
    </div>
    <div class="form-group">
        <label for="subTitle">Untertitel</label>
        <InputText id="subTitle" aria-describedby="subTitleHelp" class="form-control" @bind-Value="meetup.SubTitle" autocomplete="on" placeholder="Untertitel" />
        <small id="subTitleHelp" class="form-text text-muted">
            Statt Länge und Tempo kann hier auch ein Untertitel angegeben werden.
        </small>
    </div>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="cross" aria-describedby="crossHelp" class="form-check-input" @bind-Value="meetup.IsCross" />
            <label for="cross" class="form-checklabel">
                Cross/Gravel Runde?
            </label>
        </div>
        <small id="crossHelp" class="form-text text-muted">
            Die Ausfahrt wird in der Liste gut sichtbar als "Cross" markiert.
        </small>
    </div>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="training" aria-describedby="trainingHelp" class="form-check-input" @bind-Value="meetup.IsTraining" />
            <label for="training" class="form-checklabel">
                Training?
            </label>
        </div>
        <small id="trainingHelp" class="form-text text-muted">
            Die Ausfahrt ist nicht "nur" eine Ausfahrt, sondern ein strukturiertes Training und wird entsprechend markiert.
        </small>
    </div>
    @if (KeywordCheck.IsAdmin)
    {
        <div class="form-group">
            <div class="form-check">
                <InputCheckbox id="iskids" aria-describedby="internalHelp" class="form-check-input" @bind-Value="meetup.IsKids" />
                <label for="iskids" class="form-check-label">
                    Für Pänz?
                </label>
            </div>
            <small id="internalHelp" class="form-text text-muted">
                Ist dies eine Ausfahrt oder Training für Pänz?
            </small>
        </div>
        <div class="form-group">
            <div class="form-check">
                <InputCheckbox id="isyouth" aria-describedby="internalHelp" class="form-check-input" @bind-Value="meetup.IsYouth" />
                <label for="isyouth" class="form-check-label">
                    Für Jugend?
                </label>
            </div>
            <small id="internalHelp" class="form-text text-muted">
                Ist dies eine Ausfahrt oder Training für Jugendliche?
            </small>
        </div>
        <div class="form-group">
            <label for="trainer">Trainer:innen, die das Pänz-/Jugendtraining leiten</label>
            <InputText id="trainer" aria-describedby="tempoHelp" class="form-control" @bind-Value="meetup.Trainer" autocomplete="on" placeholder="Namen der Trainer:innen" />
            <small id="trainerHelp" class="form-text text-muted">
                Die Trainer:innen für das Training/die Ausfahrt.
            </small>
        </div>
    }
    @if (AppStateStore.ClientSettings.PublicMeetUpJoiningEnabled)
    {
        <div class="form-group">
            <div class="form-check">
                <InputCheckbox id="internal" aria-describedby="internalHelp" class="form-check-input" @bind-Value="meetup.IsInternal" />
                <label for="internal" class="form-check-label">
                    Nur für Vereinsmitglieder?
                </label>
            </div>
            <small id="internalHelp" class="form-text text-muted">
                Soll die Ausfahrt nur für Vereinsmitglieder, die auf der Startseite das Schlüsselwort angegeben haben, offen sein?
            </small>
        </div>
    }
    @if (!String.IsNullOrEmpty(AppStateStore.ClientSettings.Federation))
    {
        <div class="form-group">
            <div class="form-check">
                <input type="checkbox" id="federation" checked="@IsFederated()" @oninput="@(() => CheckFederation())" aria-describedby="federationHelp" class="form-check-input">
                <label for="federation" class="form-check-label">
                    Teilen mit @AppStateStore.ClientSettings.Federation?
                </label>
            </div>
            <small id="federationHelp" class="form-text text-muted">
                Auswählen, wenn die Ausfahrt/der Termin geteilt werden soll, d.h. auch beim Partner-Club angezeigt werden soll.
            </small>
        </div>
    }
    <div class="form-row">
        <div class="form-group col-md-10">
            <InputText id="link" aria-describedby="linkHelp" class="form-control" @bind-Value="meetup.Link" placeholder="Link zu weiterer Streckeninfo" title="Link zu weiterer Streckeninfo" />
            <small id="linkHelp" class="form-text text-muted">
                Optional: Link zu weiteren Strecken-Infos, z.B. Komoot, Strava usw.
            </small>
        </div>
        <div class="form-group col-md-2">
            <div class="form-check">
                <button id="btnLinkPreviewEnabled" class="btn btn-primary" type="button" @onclick="@(() => ToggleLinkPreview())">Preview An/Aus</button>
            </div>
        </div>
    </div>
    @if (LinkPreviewEnabled)
    {
        <div class="form-row">
            <div class="form-group col-12 col-sm-6 col-lg-4 col-xl-4 mt-2">
                <img src="@meetup.LinkImage" class="img-fluid" />
            </div>
        </div>
    }
    <div class="form-row">
        <div class="form-group col-md-8">
            <InputText id="linkImage" aria-describedby="linkImageHelp" class="form-control" @bind-Value="meetup.LinkImage" placeholder="URL zu einem Image" title="Link zu einem Image" />
            <small id="linkImageHelp" class="form-text text-muted">
                Optional: Link zu einem Bild zur Strecke
            </small>
        </div>
        <div class="form-group col-md-4">
            <UploadImage Title="@meetup.Title" OnFileUploaded="@((string uploadLink) => {meetup.LinkImage = uploadLink; })"></UploadImage>
        </div>
    </div>
    <div class="form-group">
        <label for="linkTitle">Link-Bezeichnung</label>
        <InputText id="linkTitle" aria-describedby="linkTitleHelp" class="form-control" @bind-Value="meetup.LinkTitle" placeholder="Kurze Überschrift zum Link" title="Bezeichnung des Links zur weiterern Streckeninfo" />
        <small id="linkTitleHelp" class="form-text text-muted">
            Optional: Kurze Bezeichnung zu dem Link oben, falls der Standardtext "Tour auf Komoot" oder "Weitere Info ..." nicht passt.
        </small>
    </div>
    @if (KeywordCheck.IsAdmin)
    {
        <div class="form-row">
            <div class="form-group col-md-3">
                <label for="publishDate">Veröffentlichung</label>
                <InputDate id="publishDate" aria-describedby="publishDateHelp" class="form-control" @bind-Value="publishDate" title="Veröffentlichung" />
                <small id="publishDateHelp" class="form-text text-muted">
                    Wann soll der Termin veröffentlicht werden?
                </small>
            </div>
            <div class="form-group col-md-3">
                <label for="publishTime">Uhrzeit</label>
                <input type="time" class="form-control" @bind="@publishTime" title="Uhrzeit Veröffentlichung" />
            </div>
        </div>
        <div class="form-group">
            <div class="form-check">
                <InputCheckbox id="withoutHost" aria-describedby="withoutHostHelp" class="form-check-input" @bind-Value="meetup.WithoutHost" />
                <label for="withoutHost" class="form-check-label">
                    Ausfahrt ohne Guide eintragen?
                </label>
            </div>
            <small id="withoutHostHelp" class="form-text text-muted">
                Für Termine ohne Guide, z.B. wiederkehrende Ausfahrten.
            </small>
        </div>
        <div class="form-group">
            <div class="form-check">
                <InputCheckbox id="weekly" aria-describedby="weeklyHelp" class="form-check-input" @bind-Value="meetup.Weekly" />
                <label for="weekly" class="form-check-label">
                    Soll die Ausfahrt automatisch in der nächsten Woche wiederholt werden?
                </label>
            </div>
            <small id="weeklyHelp" class="form-text text-muted">
                Falls markiert wird die Ausfahrt immer in die nächste Woche kopiert. Über das Veröffentlichungsdatum wird gesteuert, wann die Ausfahrt für alle sichtbar wird.
            </small>
        </div>
        <div class="form-group">
            <label for="attachedInfo">Zusätzliche Info </label>
            <InputSelect id="attachedInfo" aria-describedby="attachedInfoHelp" @bind-Value="meetup.AttachedInfoType" class="form-control">
                <option value="">Typ der Zusatzinfo auswählen...</option>
                <option value="@nameof(ChallengeRanking)">Bergfest Challenge</option>
                <option value="@nameof(Winterpokal)">Winterpokal</option>
                <option value="@nameof(ContentChapters)">"Akkordion"</option>
            </InputSelect>
        </div>
        <small id="attachedInfoHelp" class="form-text text-muted">
            Optional: Typ der zusätzlichen Info, die in die Ausfahrt übernommen werden soll.
        </small>
        <div class="form-group">
            <label for="attachedInfoKey">Schlüssel für Zusatzinfo</label>
            <InputText id="attachedInfoKey" aria-describedby="attachedInfoKeyHelp" class="form-control" @bind-Value="meetup.AttachedInfoKey" placeholder="Schlüssel um Zusatzinfo zu lesen" title="Schlüssel um Zusatzinfo zu lesen" />
            <small id="attachedInfoKeyHelp" class="form-text text-muted">
                Wenn eine Zusatzinfo in die Ausfahrt übernommen werden soll, hier den Schlüssel, um diese zu lesen angeben..
            </small>
        </div>
    }
    <div class="form-group">
        <label for="size">Max. Gruppengröße</label>
        <RadzenNumeric id="size" aria-describedby="sizeHelp" class="form-control" TValue="int" Min="0" Max="@AppStateStore.ClientSettings?.GetMaxGroupSize(KeywordCheck.IsAdmin)" @bind-Value="meetup.MaxRegistrationsCount" />
        <small id="sizeHelp" class="form-text text-muted">
            Hier kann die Größe der Gruppe entsprechend beschränkt werden. Maximale Gruppengröße ist momentan @(AppStateStore.ClientSettings?.GetMaxGroupSize(KeywordCheck.IsAdmin)).
        </small>
    </div>
    <div class="form-group">
        <label for="size">Warteliste</label>
        <RadzenNumeric id="size" aria-describedby="sizeHelp" class="form-control" TValue="int" Min="0" Max="@AppStateStore.ClientSettings?.GetMaxGroupSize(KeywordCheck.IsAdmin)" @bind-Value="meetup.MaxWaitingList" />
        <small id="sizeHelp" class="form-text text-muted">
            Soll eine Warteliste eingerichtet werden und wie groß soll sie sein (0 = keine Warteliste)? Maximale Größe ist momentan @(AppStateStore.ClientSettings?.GetMaxGroupSize(KeywordCheck.IsAdmin)).
        </small>
    </div>
    <div class="form-group">
        <label for="size">Mindestteilnehmerzahl</label>
        <RadzenNumeric id="minSize" aria-describedby="sizeHelp" class="form-control" TValue="int" Min="0" Max="@AppStateStore.ClientSettings?.GetMaxGroupSize(KeywordCheck.IsAdmin)" @bind-Value="meetup.MinRegistrationsCount" />
        <small id="sizeHelp" class="form-text text-muted">
            Optional: Gewünschte Mindestteilnehmerzahl der Gruppe. Dies wird entsprechend angezeigt, hat aber ansonsten keine Konsequenzen, d.h. es wird kein Termin automatisch abgesagt oder gelöscht ...
        </small>
    </div>
    <div class="form-group">
        <label for="CoGuides">Anzahl gewünschte Co-Guides</label>
        <InputSelect id="CoGuides" @bind-Value="meetup.MaxCoGuidesCount" class="form-control">
            <option value="0">Kein Co-Guide</option>
            <option value="1">Ein Co-Guide gewünscht</option>
            <option value="2">Zwei Co-Guides gewünscht</option>
            <option value="3">Drei Co-Guides gewünscht</option>
        </InputSelect>
        <small id="standardPlaceHelp" class="form-text text-muted">
            Wünscht du dir Unterstützung von Co-Guides? Du kannst bis zu drei Co-Guides anfragen.
        </small>
    </div>
    <div class="form-group">
        <label for="privateKeyword">Private Ausfahrt?</label>
        <InputText id="privateKeyword" aria-describedby="privateKeywordHelp" class="form-control" @bind-Value="meetup.PrivateKeyword" autocomplete="on" placeholder="Schlüsselwort für private Ausfahrt" />
        <small id="privateKeywordHelp" class="form-text text-muted">
            Falls die Ausfahrt "privat" sein soll, hier ein Schlüsselwort festlegen und den potentiellen Mitfahrern separat mitteilen.
        </small>
    </div>
    @if (AppStateStore.ClientSettings.GuestsEnabled)
    {
        <div class="form-group">
            <label for="guestScope">"Scope" für direkte Verlinking</label>
            <InputText id="guestScope" aria-describedby="guestScopeHelp" class="form-control" @bind-Value="meetup.GuestScope" autocomplete="on" placeholder="Kürzel, das im Link verwendet wird." />
            <small id="guestScopeHelp" class="form-text text-muted">
                Über den "Scope" können Ausfahrten z.B. Gäste zusammen gefasst werden und sind dann über einen Link der Form ".../scope" erreichbar.
            </small>
        </div>
    }
    <ValidationSummary />
    <button type="submit" id="BtnSave" disabled="@saveDisabled" class="btn btn-primary">Termin speichern ...</button>
    <button type="reset" id="BtnCancel" class="btn btn-secondary" @onclick="@(() => OnCancel())">Zurück ohne Speichern</button>
</EditForm>

@code {
    [Parameter]
    public string ItemId { get; set; }
    private HubConnection hubConnection;
    ExtendedCalendarItem meetup = new ExtendedCalendarItem();
    string whenDateString = String.Empty;
    string _selectedMeetingPlaceId = String.Empty;
    DateTime whenTime = DateTime.Now;
    DateTime whenDate = DateTime.Now;
    DateTime publishTime = DateTime.Now.AddHours(-1.0);
    DateTime publishDate = DateTime.Now;
    BlazoredTextEditor htmlDescription;
    bool onlyScopedMeetUps = false;
    private List<KeyValuePair<string, string>> scopedDates = new List<KeyValuePair<string, string>>();
    private bool saveDisabled = false;
    private bool withoutHost = false;
    private bool _linkPreviewEnabled = false;
    IEnumerable<MeetingPlace> _meetingPlaces = new List<MeetingPlace>();
    private MeetUpPlanner.Shared.Comment _routeComment;
    private IEnumerable<ExtendedRoute> _standardRoutes = null;

    Boolean LinkPreviewEnabled
    {
        get
        {
            return _linkPreviewEnabled;
        }
        set
        {
            _linkPreviewEnabled = value;
        }
    }

    protected async Task ToggleLinkPreview()
    {
        meetup.LinkImage = null;
        LinkPreviewEnabled = !LinkPreviewEnabled;
        this.StateHasChanged();
        if (LinkPreviewEnabled && !String.IsNullOrEmpty(meetup.Link))
        {
            LinkPreview linkPreview = new LinkPreview();
            linkPreview.Url = new Uri(meetup.Link);
            HttpResponseMessage response = await Http.PostAsJsonAsync<LinkPreview>($"Util/getlinkpreview", linkPreview);
            string responseBody = await response.Content.ReadAsStringAsync();

            linkPreview = JsonConvert.DeserializeObject<LinkPreview>(responseBody);
            if (linkPreview.Success)
            {
                if (null != linkPreview.ImageUrl)
                {
                    meetup.LinkImage = linkPreview.ImageUrl.ToString();
                }
                if (null != linkPreview.Title)
                {
                    meetup.LinkTitle = linkPreview.Title;
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (null != AppStateStore && !String.IsNullOrEmpty(AppStateStore.KeyWord) && null != AppStateStore.Tenant && !(AppStateStore.ClientSettings.OnlyAdminsAsHost && !KeywordCheck.IsAdmin))
        {
            hubConnection = new HubConnectionBuilder()
                 .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
                 .WithAutomaticReconnect()
                 .Build();
            try
            {
                await hubConnection.StartAsync();
            }
            catch (Exception)
            {
            }

            onlyScopedMeetUps = AppStateStore.ClientSettings.OnlyScopedMeetUpsAllowed;
            scopedDates = GetScopedDays();
            PrepareHttpClient();
            _meetingPlaces = await Http.GetFromJsonAsync<IEnumerable<MeetingPlace>>($"Calendar/getmeetingplaces");
            if (!String.IsNullOrEmpty(ItemId))
            {
                PrepareHttpClient();
                // Get referenced calendar item
                meetup = await Http.GetFromJsonAsync<ExtendedCalendarItem>($"Calendar/extendedcalendaritem?itemId={ItemId}");
                withoutHost = meetup.WithoutHost;
                LinkPreviewEnabled = !String.IsNullOrEmpty(meetup.LinkImage);
            }
            else
            {
                meetup.HostFirstName = AppStateStore.FirstName;
                meetup.HostLastName = AppStateStore.LastName;
                meetup.HostAdressInfo = AppStateStore.PhoneMail;
                meetup.MaxRegistrationsCount = AppStateStore.ClientSettings.MaxGroupSize;
                if (onlyScopedMeetUps && scopedDates.Count > 0)
                {
                    whenDateString = scopedDates[0].Key;
                    DateTime dateToSetStartTime = DateTime.Parse(whenDateString);
                    if (dateToSetStartTime.DayOfWeek == DayOfWeek.Saturday || dateToSetStartTime.DayOfWeek == DayOfWeek.Sunday)
                    {
                        meetup.StartDate = dateToSetStartTime.AddHours(10.0);
                    }
                    else
                    {
                        meetup.StartDate = dateToSetStartTime.AddHours(18.0);
                    }
                }
                if (null != AppStateStore.RouteArg && null != AppStateStore.RouteArg.Core)
                {
                    await InitializeMeetUpFromRoute(AppStateStore.RouteArg);

                    AppStateStore.RouteArg = null;
                }
                else if (AppStateStore.Tenant.TracksEnabled)
                {
                    _standardRoutes = await GetListOfStandardRoutes();
                }
            }
            whenDate = meetup.StartDate;
            whenTime = meetup.StartDate;
            whenDateString = meetup.StartDate.ToString("yyyy-MM-dd");
            publishDate = meetup.PublishDate.ToLocalTime();
            publishTime = meetup.PublishDate.ToLocalTime();
            withoutHost = meetup.WithoutHost;
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task OnSave()
    {
        if (meetup.MaxRegistrationsCount > AppStateStore.ClientSettings.GetMaxGroupSize(KeywordCheck.IsAdmin))
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Gruppengröße", Detail = "Max. Gruppengröße überschritten.", Duration = 4000 });
            return;
        }
        if (onlyScopedMeetUps)
        {
            whenDate = DateTime.Parse(whenDateString);
        }
        meetup.StartDate = new DateTime(whenDate.Year, whenDate.Month, whenDate.Day, whenTime.Hour, whenTime.Minute, whenTime.Second);
        if (meetup.StartDate.CompareTo(DateTime.Now.AddHours(-5.0)) < 0)
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Startdatum", Detail = "Bitte Startdatum korrigieren.", Duration = 4000 });
            return;
        }
        if (String.IsNullOrEmpty(meetup.SubTitle) && (String.IsNullOrEmpty(meetup.LevelDescription) || String.IsNullOrEmpty(meetup.Tempo)))
        {
            // No subtitle ==> Tempo AND Lenght of event required
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Länge/Tempo", Detail = "Bitte Länge und Tempo oder einen Untertitel angeben.", Duration = 4000 });
            return;
        } 
        if (saveDisabled)
        {
            return;
        }
        saveDisabled = true;
        if (KeywordCheck.IsAdmin)
        {
            meetup.PublishDate = new DateTime(publishDate.Year, publishDate.Month, publishDate.Day, publishTime.Hour, publishTime.Minute, publishTime.Second).ToUniversalTime();
        }
        meetup.Summary = await htmlDescription.GetHTML();
        meetup.Summary = StripEmptyHtml(meetup.Summary);
        if (!String.IsNullOrWhiteSpace(meetup.PrivateKeyword))
        {
            meetup.PrivateKeyword = meetup.PrivateKeyword.Trim();
            // Check if the private keyword is set in session state.
            bool privateKeyWordSet = meetup.PrivateKeyword.Equals(AppStateStore.PrivateKeyWord1);
            if (!privateKeyWordSet) privateKeyWordSet = meetup.PrivateKeyword.Equals(AppStateStore.PrivateKeyWord2);
            if (!privateKeyWordSet) privateKeyWordSet = meetup.PrivateKeyword.Equals(AppStateStore.PrivateKeyWord3);
            if (!privateKeyWordSet)
            {
                if (String.IsNullOrEmpty(AppStateStore.PrivateKeyWord1))
                {
                    AppStateStore.PrivateKeyWord1 = meetup.PrivateKeyword;
                }
                else if (String.IsNullOrEmpty(AppStateStore.PrivateKeyWord2))
                {
                    AppStateStore.PrivateKeyWord2 = meetup.PrivateKeyword;
                }
                else
                {
                    AppStateStore.PrivateKeyWord3 = meetup.PrivateKeyword;

                }
            }
        }
        Participant participantToBeRemoved = null;
        Participant participantToBeAdded = null;
        // Check if host-status has been changed
        if (meetup.IsKidsOrYouth())
        {
            // Training for kids/youth comes without a host, the trainers are logged in the field "Trainer"
            meetup.WithoutHost = true;
            participantToBeRemoved = meetup.FindParticipant(meetup.HostFirstName, meetup.HostLastName);
        }
        else
        {
            if (withoutHost && !meetup.WithoutHost)
            {
                // MeetUp was changed to have a host ==> assign current user as host
                meetup.HostFirstName = AppStateStore.FirstName;
                meetup.HostLastName = AppStateStore.LastName;
                meetup.HostAdressInfo = AppStateStore.PhoneMail;
                // Check if current user (and new host) is already registered and remove him
                participantToBeRemoved = meetup.FindParticipant(meetup.HostFirstName, meetup.HostLastName);
            }
            else if (!withoutHost && meetup.WithoutHost)
            {
                // MeetUp was changed to have no host ==> add current host as participant
                participantToBeAdded = new Participant(meetup.HostFirstName, meetup.HostLastName, meetup.HostAdressInfo);
                participantToBeAdded.CalendarItemId = meetup.Id;
            }
        }
        PrepareHttpClient();
        // Save calendarItem server
        await Http.PostAsJsonAsync<CalendarItem>($"Calendar/writecalendaritem", meetup);
        if (null != participantToBeRemoved)
        {
            await Http.PostAsJsonAsync<Participant>($"Calendar/removeparticipant", participantToBeRemoved);
        }
        if (null != participantToBeAdded)
        {
            await Http.PostAsJsonAsync<Participant>($"Calendar/addparticipant", participantToBeAdded);
        }
        if (null != _routeComment)
        {
            await RouteApi.WriteComment(_routeComment);
        }


        if (IsConnected) await SendMessage();

        NavigationManager.NavigateTo("/calendar");
    }
    protected void OnCancel()
    {
        NavigationManager.NavigateTo("/calendar");
    }

    protected void OnMeetingPlaceChanged(string id)
    {
        MeetingPlace meetingPlace = _meetingPlaces.FirstOrDefault(m => m.Id.Equals(id));
        if (null != meetingPlace)
        {
            meetup.Place = meetingPlace.Title;
            meetup.DirectionsLink = meetingPlace.Link;
        }
    }

    protected async Task OnStandardRouteChanged(string id)
    {
        ExtendedRoute route = _standardRoutes.FirstOrDefault(r => r.Core.Id.Equals(id));
        if (null != route)
        {
            await InitializeMeetUpFromRoute(route);
        }
    }

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        if (null != hubConnection)
        {
            _ = hubConnection.DisposeAsync();
        }
    }
    private List<KeyValuePair<string, string>> GetScopedDays()
    {
        List<KeyValuePair<string, string>> scopedDays = new List<KeyValuePair<string, string>>();

        DateTime currentDate = DateTime.Now;
        for (int i = 0; i < 7; ++i, currentDate = currentDate.AddDays(1))
        {
            switch (currentDate.DayOfWeek)
            {
                case DayOfWeek.Monday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings?.MondayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.MondayBadge));
                    }
                    break;
                case DayOfWeek.Tuesday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings?.TuesdayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.TuesdayBadge));
                    }
                    break;
                case DayOfWeek.Wednesday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings?.WednesdayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.WednesdayBadge));
                    }
                    break;
                case DayOfWeek.Thursday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings?.ThursdayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.ThursdayBadge));
                    }
                    break;
                case DayOfWeek.Friday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings?.FridayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.FridayBadge));
                    }
                    break;
                case DayOfWeek.Saturday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings?.SaturdayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.SaturdayBadge));
                    }
                    break;
                case DayOfWeek.Sunday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings?.SundayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.SundayBadge));
                    }
                    break;
            }
        }

        return scopedDays;
    }
    private void PrepareHttpClient()
    {
        if (null != AppStateStore.Tenant.TenantKey)
        {
            if (!Http.DefaultRequestHeaders.Contains("x-meetup-tenant"))
            {
                Http.DefaultRequestHeaders.Add("x-meetup-tenant", AppStateStore.Tenant.TenantKey);
            }
        }
        if (!Http.DefaultRequestHeaders.Contains("x-meetup-keyword"))
        {
            Http.DefaultRequestHeaders.Add("x-meetup-keyword", AppStateStore.KeyWord);
        }

    }

    private async  Task<IEnumerable<ExtendedRoute>> GetListOfStandardRoutes()
    {
        IEnumerable<ExtendedRoute> standardRoutes = new List<ExtendedRoute>();
        RouteFilter filter = new RouteFilter();
        IEnumerable<TagSet> tagSets = await RouteApi.GetTagSets();
        TagSet foundTagSet = null;
        Tag foundTag = null;
        string labelToCompare = AppStateStore.ClientSettings.RouteTagForQuickSelection.ToLowerInvariant();
        foreach (TagSet tagSet in tagSets)
        {
            foundTag = tagSet.Tags.FirstOrDefault(t => t.Label.ToLowerInvariant().CompareTo(labelToCompare) == 0);
            if (null != foundTag)
            {
                foundTagSet = tagSet;
                break;
            }
        }
        if (null != foundTag && null != foundTagSet)
        {
            RouteTag routeTag = new RouteTag();
            routeTag.TagId = foundTag.TagId;
            routeTag.TagId = foundTag.TagId;
            routeTag.TagLabel = foundTag.Label;
            routeTag.TagSetId = foundTagSet.Id;
            routeTag.BadgeColor = foundTagSet.BadgeColor;

            IList<RouteTag> filterRouteTag = new List<RouteTag>();
            filterRouteTag.Add(routeTag);
            filter.Tags.Add(filterRouteTag);
            standardRoutes = await RouteApi.GetRoutes(filter);
        }

        return standardRoutes;
    }

    public async Task InitializeMeetUpFromRoute(ExtendedRoute route)
    {
        meetup.Title = route.Core.Title;
        if (!String.IsNullOrEmpty(route.Core.Description))
        {
            await htmlDescription.LoadHTMLContent(route.Core.Description);
        }
        meetup.LevelDescription = route.Core.LevelDescription;
        if (!String.IsNullOrEmpty(route.Core.RouteLink))
        {
            meetup.Link = route.Core.RouteLink;
            meetup.LinkTitle = route.Core.RouteLinkTitle;
            if (!String.IsNullOrEmpty(route.Core.RouteLinkImage))
            {
                meetup.LinkImage = route.Core.RouteLinkImage;
                _linkPreviewEnabled = true;
            }
        }
        meetup.Place = route.Core.Place;
        if (!String.IsNullOrEmpty(route.Core.DirectionsLink))
        {
            meetup.DirectionsLink = route.Core.DirectionsLink;
        }
        if (!String.IsNullOrEmpty(route.Core.Scope))
        {
            meetup.RouteLink = $"https://www.meetuproutes.de/{AppStateStore.Tenant.TrackKey}/{route.Core.Scope}";
        }
        meetup.IsCross = (null != route.Core.RouteTags.FirstOrDefault(t => t.TagLabel.ToLowerInvariant().Contains("cross")))
                          || (null != route.Core.RouteTags.FirstOrDefault(t => t.TagLabel.ToLowerInvariant().Contains("gravel")))
                          || (null != route.Core.RouteTags.FirstOrDefault(t => t.TagLabel.ToLowerInvariant().Contains("cross")));
        _routeComment = new MeetUpPlanner.Shared.Comment();
        _routeComment.ReferenceId = route.Core.Id;
        _routeComment.CommentText = "Im MeetUpPlanner für eine Ausfahrt ausgewählt!";
        _routeComment.AuthorDisplayName = AppStateStore.DisplayName;
    }
    protected void CheckFederation()
    {
        if (IsFederated())
        {
            meetup.Federation = String.Empty;
            meetup.FederatedFrom = String.Empty;
        }
        else
        {
            meetup.Federation = AppStateStore.ClientSettings.Federation;
            meetup.FederatedFrom = AppStateStore.Tenant.FederationKey;
        }
    }
    protected bool IsFederated()
    {
        return (!String.IsNullOrEmpty(meetup.Federation));
    }

    private string StripEmptyHtml(string htmlContent)
    {
        htmlContent =  (null == htmlContent || htmlContent.Equals("<p><br></p>")) ? null : htmlContent;
        if (null != htmlContent)
        {
            htmlContent = htmlContent.Replace("<p><br></p>", " ");
            htmlContent = htmlContent.Replace("<p></p>", " ");
        }
        return htmlContent;
    }

}
