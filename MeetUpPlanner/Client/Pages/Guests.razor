@page "/guests/{Scope}"
@page "/{Scope}"
@inject HttpClient Http
@inject AppState AppStateStore
@using MeetUpPlanner.Shared
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NotificationService notificationService
@implements IDisposable
@using Newtonsoft.Json
@using Microsoft.AspNetCore.SignalR.Client
<h4>Kontaktdaten</h4>
<EditForm EditContext="@_editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-row">
        <div class="form-group col-md-12">
            <small id="nameHelp" class="form-text text-muted">
                Zur eindeutigen Nachverfolgbarkeit bitte Vor- und Nachname eingeben.
            </small>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <InputText id="firstname" aria-describedby="nameHelp" class="form-control" @bind-Value="@_guest.ParticipantFirstName" autocomplete="on" placeholder="Vorname" title="Vorname" />
        </div>
        <div class="form-group col-md-4">
            <InputText id="lastName" area-describedby="nameHelp" class="form-control" @bind-Value="@_guest.ParticipantLastName" autocomplete="on" placeholder="Nachname" title="Nachname" />
        </div>
    </div>
    <div class="form-group" hidden="@(!AppStateStore.Tenant.ClubMemberShipAllowed)">
        <div class="form-check">
            <InputCheckbox id="addressNotNeeded" @oninput="@(e => { _guest.ParticipantAdressInfo = ((bool)e.Value ? "Vereinsmitglied" : String.Empty); })" aria-describedby="addressNotNeededHelp" class="form-check-input" @bind-Value="AppStateStore.NoAddressNeeded"></InputCheckbox>
            <label for="addressNotNeeded" class="form-check-label">Vereinsmitglied?</label>
        </div>
        <small id="addressNotNeededHelp">Als Vereinsmitglied werden keine weiteren Adressinfos benötgt, Vor- und Nachname reichen dann.</small>
    </div>
    <div class="form-group" hidden="@AppStateStore.NoAddressNeeded">
        <label for="Phone">Telefon/Mail</label>
        <InputText id="Phone" aria-describedby="phoneHelp" class="form-control" @bind-Value="@_guest.ParticipantAdressInfo" autocomplete="on" placeholder="Telefon-Nr. oder Mail-Adresse" title="Bitte Telefonnummer oder Mailadresse angeben." />
        <small id="phoneHelp" class="form-text text-muted">
            Für die Nachverfolgbarkeit hier bitte deine Mail-Adresse oder Telefonnummer eingeben. Diese Info wird nicht in der allgemeinen Teilnehmerliste zu Ausfahrten angezeigt.
        </small>
    </div>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="SaveSettings" aria-describedby="saveSettingsHelp" class="form-check-input" @bind-Value="@AppStateStore.SaveSettings"></InputCheckbox>
            <label for="SaveSettings" class="form-check-label">Einstellungen im Browser merken?</label>
        </div>
        <small id="saveSettingsHelp">Damit beim nächsten Mal der Name usw. nicht neu eingegeben werden muss, können diese Eingaben im Browser gespeichert werden.</small>
    </div>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="accept" class="form-check-input" @bind-Value="@UsageRightsAccepted" />
            <label for="accept" class="form-checklabel">
                @((MarkupString)AppStateStore.ClientSettings.GuestDisclaimer)
            </label>
        </div>
    </div>
</EditForm>

<h4>Ausfahrt(en) "@_scopeTitle"</h4>
<div class="row">
    @foreach (ExtendedCalendarItem item in calendarItems)
    {
        <div class="col-12 col-sm-12 col-lg-6 col-xl-4 mt-2">
            <MeetUpCard FirstName="@_permAppState.FirstName" LastName="@_permAppState.LastName"
                        CalendarItem="@item"
                        IsGuest="true"
                        EnableCheckInCheckOut="true"
                        OnCheckinCallback="@(e => RegisterGuest(item))"
                        OnCheckoutCallback="@(e => RegisterGuest(item))"
                        OnCommentCallback="@(e => ShowComment(item.Id))">
            </MeetUpCard>
        </div>
    }
</div>
<div class="alert alert-info" role="alert" hidden="@(!_noMeetUps)">
    @((MarkupString)_noMeetUpsMessage)
</div>

@code {
    [Parameter]
    public string Scope { get; set; }
    Participant _guest { get; set; } = new Participant();
    const string PERM_STORAGE = "permGuestState";
    PermAppState _permAppState = new PermAppState();
    Boolean _usageRightsAccepted = false;
    private HubConnection hubConnection;
    private IList<ExtendedCalendarItem> calendarItems = new List<ExtendedCalendarItem>();
    private EditContext _editContext;
    private Boolean _noMeetUps = false;
    private string _noMeetUpsMessage;
    private string _scopeTitle;

    Boolean UsageRightsAccepted
    {
        get
        {
            return _usageRightsAccepted;
        }
        set
        {
            _usageRightsAccepted = value;
        }
    }

    protected async Task ShowComment(string calendarItemId)
    {
        if (!_editContext.Validate())
        {
            return;
        }
        if (!_usageRightsAccepted)
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Einverständnis erklären", Detail = "Bitte unten das Einverständnis zur Speicherung der Kontaktdaten ankreuzen..", Duration = 4000 });
            return;
        }
        _guest.ParticipantFirstName = _guest.ParticipantFirstName.Trim();
        _guest.ParticipantLastName = _guest.ParticipantLastName.Trim();
        _guest.ParticipantAdressInfo = _guest.ParticipantAdressInfo.Trim();
        AppStateStore.FirstName = _guest.ParticipantFirstName;
        AppStateStore.LastName = _guest.ParticipantLastName;
        AppStateStore.PhoneMail = _guest.ParticipantAdressInfo;
        if (AppStateStore.SaveSettings)
        {
            // Copy from app state to permanent storage
            _permAppState = new PermAppState();
            _permAppState.FirstName = _guest.ParticipantFirstName;
            _permAppState.LastName = _guest.ParticipantLastName;
            _permAppState.PhoneMail = _guest.ParticipantAdressInfo;
            _permAppState.NoAddressNeeded = AppStateStore.NoAddressNeeded;
            await LocalStorage.SetItemAsync<PermAppState>(PERM_STORAGE, _permAppState);
        }
        else
        {
            await LocalStorage.RemoveItemAsync(PERM_STORAGE);
        }
        _guest.IsGuest = !AppStateStore.Tenant.GuestNameShown;
        _guest.CalendarItemId = calendarItemId;
        NavigationManager.NavigateTo($"/Comment/{calendarItemId}");
    }

    protected override async Task OnInitializedAsync()
    {
        if (await LocalStorage.ContainKeyAsync(PERM_STORAGE))
        {
            // Read the user data if available from browser storage
            _permAppState = await LocalStorage.GetItemAsync<PermAppState>(PERM_STORAGE);
            // Copy the settings needed to application state
            _guest.ParticipantFirstName = _permAppState.FirstName;
            _guest.ParticipantLastName = _permAppState.LastName;
            _guest.ParticipantAdressInfo = _permAppState.PhoneMail;
            AppStateStore.NoAddressNeeded = _permAppState.NoAddressNeeded;
            // If someone has stored the settings before the disclaimer has already been accepted by user
            UsageRightsAccepted = true;
        }
        // Get client settings from server
        PrepareHttpClient();
        TenantClientSettings tenantClientSettings = await Http.GetFromJsonAsync<TenantClientSettings>("Util/tenantclientsettings");
        AppStateStore.Tenant = tenantClientSettings.Tenant;
        AppStateStore.ClientSettings = tenantClientSettings.Client;
        if (AppStateStore.Tenant.IsLocked || AppStateStore.ClientSettings.AppLocked)
        {
            _noMeetUps = true;
            if (AppStateStore.Tenant.IsLocked)
            {
                if (!String.IsNullOrEmpty(AppStateStore.Tenant.LockMessage))
                {
                    _noMeetUpsMessage = AppStateStore.Tenant.LockMessage;
                }
            }
            else
            {
                if (!String.IsNullOrEmpty(AppStateStore.ClientSettings.LockedMessage))
                {
                    _noMeetUpsMessage = AppStateStore.ClientSettings.LockedMessage;
                }
            }
        }
        else
        {
            await ReadData();
        }
        hubConnection = new HubConnectionBuilder()
         .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
         .WithAutomaticReconnect()
         .Build();
        await hubConnection.StartAsync();
        AppStateStore.NotifyStateChanged();
    }
    protected override void OnInitialized()
    {
        _editContext = new EditContext(_guest);
        _noMeetUpsMessage = $"<p>Aktuell werden keine Ausfahrten {Scope} angeboten. Aber das kann sich natürlich ändern, also später noch einmal probieren.</p>";

    }



    protected async Task ReadData()
    {
        // Get list of calendar items
        PrepareHttpClient();
        calendarItems = await Http.GetFromJsonAsync<IList<ExtendedCalendarItem>>($"calendar/scopedcalendaritems?scope={Scope}");
        _scopeTitle = Scope;
        if (calendarItems.Count() == 0)
        {
            // Given scope might be a id, try it ...
            ExtendedCalendarItem meetup = await Http.GetFromJsonAsync<ExtendedCalendarItem>($"Calendar/extendedcalendaritemforguest?itemId={Scope}");
            if (null != meetup && meetup.StartDate.CompareTo(DateTime.Now.AddHours(-13)) < 0)
            {
                // MeetUp too old ==> set it to null again
                meetup = null;
            }
            if (null != meetup)
            {
                calendarItems = new List<ExtendedCalendarItem>();
                calendarItems.Add(meetup);
                _scopeTitle = meetup.Title;
            }
        }
        _noMeetUps = calendarItems.Count() == 0;
        StateHasChanged();
    }
    private void CallReadData()
    {
        Task.Run(async () =>
        {
            await ReadData();
        });
    }

    private async Task RegisterGuest(ExtendedCalendarItem calendarItem)
    {
        if (!_editContext.Validate())
        {
            return;
        }
        if (!_usageRightsAccepted)
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Einverständnis erklären", Detail = "Bitte unten das Einverständnis zur Speicherung der Kontaktdaten ankreuzen..", Duration = 4000 });
            return;
        }
        _guest.ParticipantFirstName = _guest.ParticipantFirstName.Trim();
        _guest.ParticipantLastName = _guest.ParticipantLastName.Trim();
        _guest.ParticipantAdressInfo = _guest.ParticipantAdressInfo.Trim();
        if (AppStateStore.SaveSettings)
        {
            // Copy from app state to permanent storage
            _permAppState = new PermAppState();
            _permAppState.FirstName = _guest.ParticipantFirstName;
            _permAppState.LastName = _guest.ParticipantLastName;
            _permAppState.PhoneMail = _guest.ParticipantAdressInfo;
            await LocalStorage.SetItemAsync<PermAppState>(PERM_STORAGE, _permAppState);
        }
        else
        {
            await LocalStorage.RemoveItemAsync(PERM_STORAGE);
        }
        _guest.IsGuest = !AppStateStore.Tenant.GuestNameShown;
        _guest.CalendarItemId = calendarItem.Id;
        BackendResult result;
        Participant participant = calendarItem.FindParticipant(_guest.ParticipantFirstName, _guest.ParticipantLastName);
        if (null == participant)
        {
            if (calendarItem.IsCanceled)
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Abgesagt", Detail = "Der Termin ist leider abgesagt.", Duration = 4000 });
                return;
            }
            PrepareHttpClient();
            HttpResponseMessage response = await Http.PostAsJsonAsync<Participant>($"Calendar/addguest", _guest);
            string responseBody = await response.Content.ReadAsStringAsync();

            result = JsonConvert.DeserializeObject<BackendResult>(responseBody);
            if (result.Success)
            {
                if (IsConnected) await SendMessage();
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Angemeldet", Detail = "Du bist jetzt angemeldet. Über diese Seite kannst du dich auch wieder abmelden.", Duration = 4000 });
            }
        }
        else
        {
            PrepareHttpClient();
            HttpResponseMessage response = await Http.PostAsJsonAsync<Participant>($"Calendar/removeguest", participant);
            string responseBody = await response.Content.ReadAsStringAsync();

            result = JsonConvert.DeserializeObject<BackendResult>(responseBody);
            if (result.Success)
            {
                if (IsConnected) await SendMessage();
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Abgemeldet", Detail = "Du bist jetzt von der Ausfahrt abgemeldet.", Duration = 4000 });
            }
        }
        if (result.Success)
        {
            await ReadData();
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Fehler", Detail = result.Message, Duration = 4000 });
        }

    }


    private void PrepareHttpClient()
    {
        if (null != AppStateStore.Tenant && null != AppStateStore.Tenant.TenantKey)
        {
            if (!Http.DefaultRequestHeaders.Contains("x-meetup-tenant"))
            {
                Http.DefaultRequestHeaders.Add("x-meetup-tenant", AppStateStore.Tenant.TenantKey);
            }
        }
        if (!Http.DefaultRequestHeaders.Contains("x-meetup-tenant-url"))
        {
            Http.DefaultRequestHeaders.Add("x-meetup-tenant-url", NavigationManager.BaseUri);
        }
    }

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

}
